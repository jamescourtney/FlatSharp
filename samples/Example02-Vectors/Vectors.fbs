/*
 * Copyright 2020 James Courtney
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Declare FlatSharp attributes.

attribute "fs_vector";
attribute "fs_serializer";
attribute "fs_setter";
attribute "fs_sortedVector";

namespace Samples.Vectors;

// FlatSharp supports lots of different options for using Vectors.
// One type of vector that is not included here is the FlatSharp Indexed Vector, which
// has its own sample later.

union Animal { Eagle, Dog, Fish }

table Eagle { wingspan_cm : int; age: int; }
table Dog { name : string; favorite_food: string; }
table Fish { flipper_count: int; }

table LotsOfLists (fs_serializer:"Progressive")
{
    // Vectors are IList<T> by default. You can make this explicity with fs_vector:"IList"
    list_vector_of_string : [ string ]; 

    // They can also be IReadOnlyList.
    read_only_list_vector_of_string : [ int ] (fs_vector:"IReadOnlyList");

    // They can also be sorted:
    // Sorted Vectors may only be tables and must have a 'key' element.
    sorted_list_of_table: [ KeyValuePair ] (fs_sortedVector);

    // Unions can also be in vectors!
    list_of_union: [ Animal ];

    // UByte vectors default to being Memory<byte>
    vector_of_ubyte : [ ubyte ];

    // They can also be ReadOnlyMemory.
    read_only_vector_of_ubyte : [ ubyte ] (fs_vector:"ReadOnlyMemory");
}

table KeyValuePair
{
    key : string (key, required);
    value : string;
}