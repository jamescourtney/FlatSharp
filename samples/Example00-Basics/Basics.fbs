/*
 * Copyright 2020 James Courtney
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Declare FlatSharp attributes.

attribute "fs_vector";
attribute "fs_serializer";
attribute "fs_valueStruct";

namespace Samples.Basics;

enum Color : byte
{
    Red = 0,
    Green = 1,
    Blue = 2,
}

// Structs are fixed-size objects whose schema may not change. Structs 
// are highly efficient to read and write, at the cost of versioning the 
// struct. Consider a table with a union of structs to get the best of both 
// worlds.
struct Vec3 (fs_valueStruct) // fs_valueStruct tells FlatSharp to generate a C# struct (value type) instead of a class
{
    x : float;
    y : float;
    z : float;
}

table Weapon
{
    name : string;
    damage : short;
}

union Equipped
{
    Weapon,
    Item : string
}

table Monster (fs_serializer)
{
    color : Color;
    pos : Vec3;
    mana : short = 150;
    HP : short = 100;
    name : string;
    friendly : bool = false (deprecated);
    inventory : [ ubyte ] (fs_vector:"Memory");
    weapons : [ Weapon ];
    equipped : Equipped;
    path : [ Vec3 ];
    mana_regen_rate : double;
    secondary_color : Color;
}