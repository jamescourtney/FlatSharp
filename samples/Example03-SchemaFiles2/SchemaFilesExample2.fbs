/*
 * Copyright 2020 James Courtney
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

namespace Samples.SchemaFilesExample2;

attribute "fs_serializer";
attribute "fs_vector";

enum Fruit : byte { Apples, Pears, Bananas }

// FooBarContainer's serializer is generated at build time here, which means we don't need
// to use FlatBufferSerializer to make one for us at runtime. It also means we don't need
// a reference to the "FlatSharp" nuget package. Only "FlatSharp.Runtime" is required.
// Runtime vs build-time generated serializers perform equally well.

/// This comment is injected into C# because of the '///'
table FooBarContainer (fs_serializer:"greedymutable") // Valid values are: "greedy", "greedymutable", "progressive", and "lazy"
{
  list:[FooBar] (fs_vector:"IList");  // Can also be IReadOnlyList,Array,Memory,ReadOnlyMemory
  initialized:bool;
  fruit:Fruit;
  location:string;
}

table FooBar (fs_serializer) { // default options used when none are specified.
  sibling:Bar;
  name:string;
  rating:double;
  postfix:ubyte; 
}

table OtherTable (fs_serializer:"lazy") {
  name:string;
}

struct Foo {
  id:ulong;
  count:short; 
  prefix:byte;
  length:uint;
}

struct Bar {
  parent:Foo;
  time:int;
  ratio:float;
  size:ushort;
}

root_type FooBarContainer;
