/*
 * Copyright 2021 James Courtney
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

namespace Samples.UnsafeOptions;

attribute "fs_serializer";
attribute "fs_valueStruct";
attribute "fs_unsafeExternal";
attribute "fs_unsafeStructVector";
attribute "fs_unsafeUnion";

// Declare some structs

// A 16 byte struct. Could be a GUID.
struct SixteenBytes (fs_valueStruct)
{ 
    // 16 bytes accessed in an unsafe manner. Much faster than the safe alternative.
    data : [ ubyte : 16 ] (fs_unsafeStructVector);
}

struct FourBytes (fs_valueStruct)
{
    a : int;
}

// Will be emitted as System.Numerics.Vector3. There are runtime checks
// to ensure that the size of Vector3 is the same as the size of this struct.
struct Vec3 (fs_valueStruct, fs_unsafeExternal:"System.Numerics.Vector3")
{
    data : [ float : 3 ];
}

struct TwentyBytes (fs_valueStruct) 
{ 
    sixteen : SixteenBytes;
    four : FourBytes;
}

union UnsafeUnion (fs_unsafeUnion)
{
    SixteenBytes,
    FourBytes,
    Vec3,
    TwentyBytes
}

table RootTable (fs_serializer)
{
    union : [ UnsafeUnion ];
}