/*
 * Copyright 2021 James Courtney
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

 
// WriteThrough is great when you only need to make small changes to a FlatBuffer and don't want to pay the cost
// of a complete read-modify-write sequence. With WriteThrough enabled, you can make select updates directly back to the buffer.

// WriteThrough is only applicable to structs, and is only available when using "VectorCacheMutable" as the serializer.

namespace Samples.WriteThrough;

// In this contrived example, imagine an animal shelter. There are lots of volunteers walking different dogs.
// Each volunteer only has one dog at a time, but they can change dogs quite frequently. We'd like to
// be able to update the current dog that each volunteer is walking without doing a full parse and re-serialize
// of the entire list of volunteers. There are also lots of dog-nappers around, so we need to be able to update
// the last known location of a given volunteer so we can call the police if they go missing.

table Roster (fs_serializer:"VectorCacheMutable") {
   Walkers : [DogWalker];
}

table DogWalker {
    Name : string;
    CurrentDog : DogReference;
    Position : Location;
}

struct DogReference { Id : int (fs_writeThrough); }

// Can be applied to all items in a struct.
struct Location (fs_writeThrough) { 
    Latitude : double; 
    Longitude : double; 
    NoWriteThrough : int (fs_writeThrough:"false"); 
}