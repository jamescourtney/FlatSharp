/*
 * Copyright 2021 James Courtney
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

 
// WriteThrough is great when you only need to make small changes to a FlatBuffer and don't want to pay the cost
// of a complete read-modify-write sequence. With WriteThrough enabled, you can make select updates directly back to the buffer.

// WriteThrough is only applicable to structs, and is only available when using "VectorCacheMutable" or "Lazy" as the serializer.

namespace Samples.WriteThrough;

attribute "fs_serializer";
attribute "fs_writeThrough";
attribute "fs_defaultCtor";
attribute "fs_valueStruct";

// A bloom filter is a probabilistic data structure 
// used for answering the question "might this item be in the collection?"
// with a high degree of confidence. This sample uses FlatSharp to store a
// large Bloom Filter and make efficient in-place updates to it using the WriteThrough option.

table BloomFilter (fs_serializer:"Lazy", fs_defaultCtor:"None")
{
	Blocks : [Block] (required);
}

// We define a block as 128 bytes.
struct Block
{
    // For reference structs, write through happens within the struct.
    Data : [ulong : 16]  (fs_writeThrough);
}

// Defines a path, which is a set of points.
table Path (fs_serializer:"Progressive")
{
    // For value structs, write through happens through the containing table field or vector.
    Points : [ Point ] (fs_writeThrough);

    // The number of items in the "points" vector.
    NumPoints : MutableInt (fs_writeThrough, required);
}

struct MutableInt (fs_valueStruct)
{
    Value : int;
}

struct Point (fs_valueStruct)
{
    X : float;
    Y : float;
    Z : float;
}