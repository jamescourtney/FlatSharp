/*
 * Copyright 2020 James Courtney
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

<#
	(string casedName, string typeName, string literalSpecifier, string[] fbsAliases, string writeNameClass, string readNameClass)[] types = 
	{
		("Bool", "bool", "", new[] { "bool" }, "SpanWriterExtensions", "InputBufferExtensions"),
		("Byte", "byte", "", new[] { "ubyte", "uint8" }, null, null),
		("SByte", "sbyte", "", new[] { "byte", "int8" }, null, null),
		("UShort", "ushort", "", new[] { "ushort", "uint16" }, null, null),
		("Short", "short", "", new[] { "short", "int16" }, null, null),
		("Int", "int", "", new[] { "int", "int32" }, null, null),
		("UInt", "uint", "u", new[] { "uint", "uint32" }, null, null),
		("Long", "long", "L", new[] { "long", "int64" }, null, null),
		("ULong", "ulong", "ul", new[] { "ulong", "uint64" }, null, null),
		("Float", "float", "f", new[] { "float", "float32" }, null, null),
		("Double", "double", "d", new[] { "double", "float64" }, null, null),
	};
#>

namespace FlatSharp.TypeModel
{
	using System;
	using System.ComponentModel;

	<#
		foreach (var pair in types)
		{
			var casedName = pair.casedName;
			var typeName = pair.typeName;
			var className = $"{casedName}TypeModel";
	#>
	
    /// <summary>
    /// Type Model for <see cref="<#= typeName #>"/>.
    /// </summary>
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public partial class <#= className #> : ScalarTypeModel
    {
        public <#= className #>() : base(typeof(<#=typeName#>), sizeof(<#=typeName#>)) 
        {
        }
		
        public override bool TryFormatStringAsLiteral(string value, out string literal)
		{
			literal = $"(<#= pair.typeName #>)({value}<#= pair.literalSpecifier #>)";
			return true;
		}

        public override bool TryGetSpanComparerType(out Type comparerType)
        {
            comparerType = typeof(<#= casedName #>SpanComparer);;
            return true;
        }

        protected override string InputBufferReadMethodName => nameof(<#= pair.readNameClass ?? "IInputBuffer" #>.Read<#= casedName #>);

        protected override string SpanWriterWriteMethodName => nameof(<#= pair.writeNameClass ?? "ISpanWriter" #>.Write<#= casedName #>);
    }

	
    /// <summary>
    /// Type Model for <see cref="<#= typeName #>?"/>.
    /// </summary>
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public partial class Nullable<#= className #> : ScalarTypeModel
    {
        public Nullable<#= className #>() : base(typeof(<#=typeName#>?), sizeof(<#=typeName#>)) 
        {
        }

        public override bool TryGetSpanComparerType(out Type comparerType)
        {
            comparerType = null;
            return false;
        }
		
        protected override string InputBufferReadMethodName => nameof(<#= pair.readNameClass ?? "IInputBuffer" #>.Read<#= casedName #>);

        protected override string SpanWriterWriteMethodName => nameof(<#= pair.writeNameClass ?? "ISpanWriter" #>.Write<#= casedName #>);
    }

	<# } #>

	public class ScalarTypeModelProvider : ITypeModelProvider
	{
        public bool TryCreateTypeModel(TypeModelContainer container, Type type, out ITypeModel typeModel)
		{
			typeModel = null;
		<#
			foreach (var pair in types)
			{
				var casedName = pair.casedName;
				var typeName = pair.typeName;
				var className = $"{casedName}TypeModel";
		#>

			if (type == typeof(<#= typeName #>))
			{
				typeModel = new <#= className #>(); 
				return true;
			}

			if (type == typeof(<#= typeName #>?))
			{
				typeModel = new Nullable<#= className #>(); 
				return true;
			}

		<# } #>

			return false;
		}
		
        public bool TryResolveFbsAlias(TypeModelContainer container, string alias, out ITypeModel typeModel)
		{
			typeModel = null;
			switch (alias)
			{
		<#
			foreach (var pair in types)
			{
				var casedName = pair.casedName;
				var typeName = pair.typeName;
				var className = $"{casedName}TypeModel";
				foreach (var alias in pair.fbsAliases)
				{
		#>
				case "<#= alias #>":
		<# 
			} 
		#>
					typeModel = new <#= className #>();
					break;

		<# } #>
			}

			return typeModel != null;
		}
	}
}