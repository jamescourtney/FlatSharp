<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

<#
	int numGenerics = 9;
#>

namespace FlatSharp
{
	internal interface IUnion
	{
	}


	<#
		for (int i = 0; i < numGenerics; ++i)
		{
			var range = Enumerable.Range(1, i + 2);
	#>
			[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			public sealed class FlatBufferUnion<<#= string.Join(", ", range.Select(x => "T" + x)) #>> : IUnion
			{
				private readonly byte discriminator;
				
				<# foreach (var genericType in range) { #>

				private readonly T<#= genericType #> item<#= genericType #>;
				
				<# } #>
				
				<# foreach (var genericType in range) { #>

				public FlatBufferUnion(<#= "T" + genericType #> item)
				{
					if (object.ReferenceEquals(item, null))
					{
						throw new System.ArgumentNullException(nameof(item), "FlatBuffer unions do not accept null items. If you wish to use a null value, simply null out the union on the class.");
					}

					this.discriminator = <#= genericType #>;
					this.item<#= genericType #> = item;
				}
				
				<# } #>
			
				public byte Discriminator => this.discriminator;

				<# foreach (var genericType in range) { #>

				public T<#= genericType #> Item<#= genericType #>
				{
					get 
					{
						if (this.discriminator == <#= genericType #>)
						{
							return this.item<#= genericType #>;
						}
						else
						{
							throw new System.InvalidOperationException();
						}
					}
				}
				
				<# 
				} 
				#>
			}
	<#
		}
	#>

}