namespace FlatSharp.Compiler.Schema
{
    using FlatSharp.Attributes;
    using System.Collections.Generic;

    /*
    table Schema {
        objects:[Object] (required);    // Sorted.
        enums:[Enum] (required);        // Sorted.
        file_ident:string;
        file_ext:string;
        root_table:Object;
        services:[Service];             // Sorted.
        advanced_features:AdvancedFeatures;
        /// All the files used in this compilation. Files are relative to where
        /// flatc was invoked.
        fbs_files:[SchemaFile];         // Sorted.
    }
    */
    [FlatBufferTable]
    public class Schema
    {
        [FlatBufferItem(0, Required = true, SortedVector = true)]
        public virtual IList<FlatBufferObject> Objects { get; set; } = new List<FlatBufferObject>();

        [FlatBufferItem(1, Required = true, SortedVector = true)]
        public virtual IList<FlatBufferEnum> Enums { get; set; } = new List<FlatBufferEnum>();

        [FlatBufferItem(2)]
        public virtual string? FileIdentifier { get; set; }

        [FlatBufferItem(3)]
        public virtual string? FileExtension { get; set; }

        [FlatBufferItem(4)]
        public virtual FlatBufferObject? RootTable { get; set; }

        [FlatBufferItem(5)]
        public virtual IIndexedVector<string, RpcService>? Services { get; set; }

        [FlatBufferItem(6)]
        public virtual AdvancedFeatures AdvancedFeatures { get; set; }

        [FlatBufferItem(7)]
        public virtual IIndexedVector<string, SchemaFile>? FbsFiles { get; set; }

        internal void WriteCode(CodeWriter writer, CompileContext context)
        {
            writer.AppendLine($@"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the FlatSharp FBS to C# compiler (source hash: {context.InputHash})
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
");

            writer.AppendLine("using System;");
            writer.AppendLine("using System.Collections.Generic;");
            writer.AppendLine("using System.Linq;");
            writer.AppendLine("using System.Runtime.CompilerServices;");
            writer.AppendLine("using System.Threading;");
            writer.AppendLine("using System.Threading.Tasks;");
            writer.AppendLine("using FlatSharp;");
            writer.AppendLine("using FlatSharp.Attributes;");

            // disable obsolete warnings. Flatsharp allows marking default constructors
            // as obsolete and we don't want to raise warnings for our own code.
            writer.AppendLine("#pragma warning disable 0618");

#if NET5_0_OR_GREATER
            if (RoslynSerializerGenerator.EnableStrictValidation &&
                context.Options.NullableWarnings == null)
            {
                context = context with
                {
                    Options = context.Options with
                    {
                        NullableWarnings = true
                    }
                };
            }
#endif

            if (context.Options.NullableWarnings == true)
            {
                writer.AppendLine("#nullable enable");
            }
            else
            {
                writer.AppendLine("#nullable enable annotations");
            }

            if (context.CompilePass > CodeWritingPass.PropertyModeling && context.PreviousAssembly is not null)
            {
                context.FullyQualifiedCloneMethodName = CloneMethodsGenerator.GenerateCloneMethodsForAssembly(
                    writer,
                    context.Options,
                    context.PreviousAssembly,
                    context.TypeModelContainer);
            }

            foreach (var kvp in this.Enums)
            {
                kvp.WriteCode(writer, context);
            }

            foreach (var kvp in this.Objects)
            {
                kvp.WriteCode(writer, context);
            }
        }
    }
}
