<?xml version="1.0" encoding="utf-8" ?>
<Project>

    <Choose>
        <When Condition=" '$(MSBuildVersion.Substring(0,2))' >= 16 Or
                         ('$(MSBuildVersion.Substring(0,2))' == 15 And '$(MSBuildVersion.Substring(3,1))' >= 8) ">
            <PropertyGroup>
                <TaskFactory>RoslynCodeTaskFactory</TaskFactory>
            </PropertyGroup>
        </When>
        <Otherwise>
            <PropertyGroup>
                <TaskFactory>CodeTaskFactory</TaskFactory>
            </PropertyGroup>
        </Otherwise>
    </Choose>

    <!-- Task to process the FlatSharpSchema:
       - Filters out duplicate files.
       - Transforms the 'IncludePath' metadata property to absolute paths (semi-colon separated). -->
    <UsingTask TaskName="ProcessFlatSharpSchema" TaskFactory="$(TaskFactory)" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
        <ParameterGroup>
            <Inputs ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
            <Result ParameterType="Microsoft.Build.Framework.ITaskItem[]" Output="true" />
        </ParameterGroup>
        <Task>
            <Using Namespace="System.IO" />
            <Code Type="Fragment" Language="cs">
<![CDATA[
                if (Inputs == null || Inputs.Length == 0)
                {
                    Result = Array.Empty<ITaskItem>();
                    return true;
                }

                var errors = new HashSet<string>();
                var alreadySeen = new HashSet<string>(StringComparer.OrdinalIgnoreCase);
                var outputList = new List<ITaskItem>(Inputs.Length);

                foreach (var item in Inputs)
                {
                    if (alreadySeen.Add(item.ItemSpec))
                    {
                        var includePath = String.Join(";", item.GetMetadata("IncludePath").Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries)
                            .Select(include =>
                            {
                                if (!Directory.Exists(include))
                                {
                                    errors.Add(string.Format("FlatSharpSchema.IncludePath must only contain existing directories, separated by a semi-colon. '{0}' is not a valid directory.", include));
                                    return null;
                                }
                                
                                return Path.GetFullPath(include).TrimEnd('\\');
                            }));
                        item.SetMetadata("IncludePath", includePath);
                        outputList.Add(item);
                    }
                }
                
                if (errors.Any())
                {
                    foreach (var error in errors)
                    {
                        Log.LogError(error);
                    }
                    
                    Result = Array.Empty<ITaskItem>();
                    return false;
                }

                Result = outputList.ToArray();
                return true;
]]>
            </Code>
        </Task>
    </UsingTask>

    <!-- Tell Visual Studio that fbs files can result in build changes. 
       https://github.com/dotnet/project-system/blob/cd275918ef9f181f6efab96715a91db7aabec832/docs/up-to-date-check.md -->
    <ItemGroup>
        <UpToDateCheckInput Include="@(FlatSharpSchema)" />
    </ItemGroup>

    <Target Name="FlatSharpFbsCompile" BeforeTargets="ResolveAssemblyReferences">
        <PropertyGroup Condition=" '$(FlatSharpNullable)' == '' ">
            <FlatSharpNullable>false</FlatSharpNullable>
            <FlatSharpNullable Condition=" '$(Nullable)' == 'enable' ">true</FlatSharpNullable>
        </PropertyGroup>

        <PropertyGroup Condition=" '$(FlatSharpNameNormalization)' == '' ">
            <FlatSharpNameNormalization>false</FlatSharpNameNormalization>
        </PropertyGroup>

        <!-- Query the installed SDKs. -->
        <Exec Command="dotnet --list-sdks" ConsoleToMsBuild="true">
            <Output TaskParameter="ConsoleOutput" PropertyName="StdOut" />
        </Exec>

        <!-- try netcore3.1 -->
        <PropertyGroup Condition=" $([System.Text.RegularExpressions.Regex]::IsMatch($(StdOut), '3\.1\.\d+')) ">
            <CompilerPath>$([System.IO.Path]::GetFullPath('$(MSBuildThisFileDirectory)\..\tools\netcoreapp3.1\FlatSharp.Compiler.dll'))</CompilerPath>
        </PropertyGroup>

        <!-- try .net5.0. -->
        <PropertyGroup Condition=" $([System.Text.RegularExpressions.Regex]::IsMatch($(StdOut), '5\.0\.\d+')) ">
            <CompilerPath>$([System.IO.Path]::GetFullPath('$(MSBuildThisFileDirectory)\..\tools\net5.0\FlatSharp.Compiler.dll'))</CompilerPath>
        </PropertyGroup>

        <!-- try .net6.0. -->
        <PropertyGroup Condition=" $([System.Text.RegularExpressions.Regex]::IsMatch($(StdOut), '6\.0\.\d+')) ">
            <CompilerPath>$([System.IO.Path]::GetFullPath('$(MSBuildThisFileDirectory)\..\tools\net6.0\FlatSharp.Compiler.dll'))</CompilerPath>
        </PropertyGroup>

        <Error 
            Condition=" '$(CompilerPath)' == '' " 
            Text="FlatSharp.Compiler requires .NET Core 3.1, .NET 5.0, or .NET 6.0 to be installed and available on the PATH." />

        <ProcessFlatSharpSchema Inputs="@(FlatSharpSchema)">
            <Output TaskParameter="Result" ItemName="ProcessedFlatSharpSchema" />
        </ProcessFlatSharpSchema>

        <Message
            Text="dotnet $(CompilerPath) --nullable-warnings $(FlatSharpNullable) --normalize-field-names $(FlatSharpNameNormalization) --input &quot;%(ProcessedFlatSharpSchema.fullpath)&quot; --includes &quot;%(ProcessedFlatSharpSchema.IncludePath)&quot; --output $(IntermediateOutputPath)"
            Condition=" '%(ProcessedFlatSharpSchema.fullpath)' != '' "
            Importance="high" />

        <Exec
            Command="dotnet $(CompilerPath) --nullable-warnings $(FlatSharpNullable) --normalize-field-names $(FlatSharpNameNormalization) --input &quot;%(ProcessedFlatSharpSchema.fullpath)&quot; --includes &quot;%(ProcessedFlatSharpSchema.IncludePath)&quot; --output $(IntermediateOutputPath)"
            CustomErrorRegularExpression=".*"
            Condition=" '%(ProcessedFlatSharpSchema.fullpath)' != '' " />

        <ItemGroup>
            <GeneratedFbs Include="$(IntermediateOutputPath)*.generated.cs" />
            <Compile Include="@(GeneratedFbs)" />
            <FileWrites Include="@(GeneratedFbs)" />
        </ItemGroup>
    </Target>
</Project>
