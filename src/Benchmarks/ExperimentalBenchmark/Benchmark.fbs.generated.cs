
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the FlatSharp FBS to C# compiler (source hash: 5.4.0.bqWpjMCmPLgon/+Tv8gQ39wr+ccAa6w0J/MOLE4G/Tw=)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using FlatSharp;
using FlatSharp.Attributes;
#pragma warning disable 0618
#nullable enable
namespace FlatSharp.Compiler.Generated
{
    internal static class CloneHelpers_f6276915322e4547a2a8caae563efcb7
    {
        [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static BenchmarkCore.Normal Clone(BenchmarkCore.Normal item)
        {
            checked
            {
                return item;
            }
        }

        [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static System.Byte Clone(System.Byte item)
        {
            checked
            {
                return item;
            }
        }

        [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static BenchmarkCore.Flags Clone(BenchmarkCore.Flags item)
        {
            checked
            {
                return item;
            }
        }

        [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull("item")]
        [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static BenchmarkCore.SomeTable? Clone(BenchmarkCore.SomeTable? item)
        {
            checked
            {
                return item is null ? null : new BenchmarkCore.SomeTable(item);
            }
        }

        [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull("item")]
        [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static System.Collections.Generic.IList<BenchmarkCore.Vec3>? Clone(System.Collections.Generic.IList<BenchmarkCore.Vec3>? item)
        {
            checked
            {
                return VectorCloneHelpers.Clone<BenchmarkCore.Vec3>(item, FlatSharp.Compiler.Generated.CloneHelpers_f6276915322e4547a2a8caae563efcb7.Clone);
            }
        }

        [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull("item")]
        [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static BenchmarkCore.Vec3? Clone(BenchmarkCore.Vec3? item)
        {
            checked
            {
                return item is null ? null : new BenchmarkCore.Vec3(item);
            }
        }

        [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static System.Single Clone(System.Single item)
        {
            checked
            {
                return item;
            }
        }

        [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull("item")]

        public static BenchmarkCore.Union? Clone(BenchmarkCore.Union? item)
        {
            checked
            {

                if (item is null) return null;

                return item.Discriminator switch
                {
                    1 => new BenchmarkCore.Union(FlatSharp.Compiler.Generated.CloneHelpers_f6276915322e4547a2a8caae563efcb7.Clone(item.Item1)),
                    2 => new BenchmarkCore.Union(FlatSharp.Compiler.Generated.CloneHelpers_f6276915322e4547a2a8caae563efcb7.Clone(item.Item2)),
                    _ => throw new InvalidOperationException("Unexpected union discriminator")
                };
            }
        }

        [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull("item")]
        [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static BenchmarkCore.NotRecycleable? Clone(BenchmarkCore.NotRecycleable? item)
        {
            checked
            {
                return item is null ? null : new BenchmarkCore.NotRecycleable(item);
            }
        }

        [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static System.Int32 Clone(System.Int32 item)
        {
            checked
            {
                return item;
            }
        }

        [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull("item")]
        [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static System.Collections.Generic.IList<BenchmarkCore.Union>? Clone(System.Collections.Generic.IList<BenchmarkCore.Union>? item)
        {
            checked
            {
                return VectorCloneHelpers.Clone<BenchmarkCore.Union>(item, FlatSharp.Compiler.Generated.CloneHelpers_f6276915322e4547a2a8caae563efcb7.Clone);
            }
        }

        [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull("item")]
        [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static BenchmarkCore.Struct? Clone(BenchmarkCore.Struct? item)
        {
            checked
            {
                return item is null ? null : new BenchmarkCore.Struct(item);
            }
        }

        [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull("item")]
        [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static BenchmarkCore.OtherStruct? Clone(BenchmarkCore.OtherStruct? item)
        {
            checked
            {
                return item is null ? null : new BenchmarkCore.OtherStruct(item);
            }
        }

        [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static System.Int64 Clone(System.Int64 item)
        {
            checked
            {
                return item;
            }
        }
    }

}

namespace BenchmarkCore
{
    [FlatBufferEnum(typeof(System.Byte))]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public enum Normal : System.Byte
    {
        A = (byte)(0),
        B = (byte)(1),
        C = (byte)(2),
        D = (byte)(3),
    }

    [FlatBufferEnum(typeof(System.Byte))]
    [System.Runtime.CompilerServices.CompilerGenerated]
    [System.Flags]
    public enum Flags : System.Byte
    {
        A = (byte)(1),
        B = (byte)(2),
        C = (byte)(4),
        D = (byte)(8),
        None = (byte)(0),
        All = (byte)(15),
    }

    [FlatBufferTableAttribute()]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class SomeTable
        : object
        , IFlatBufferSerializable<SomeTable>
    {
        public SomeTable()
        {
            checked
            {
                this.Points = null!;
                this.Vec = null!;
                this.Union = null!;
                this.UnionVec = null!;
                this.OnInitialized(null);
            }
        }

#pragma warning disable CS8618
        protected SomeTable(FlatBufferDeserializationContext context)
        {
            checked
            {
            }
        }

#pragma warning restore CS8618
        public SomeTable(SomeTable source)
        {
            checked
            {
                this.Points = FlatSharp.Compiler.Generated.CloneHelpers_f6276915322e4547a2a8caae563efcb7.Clone(source.Points);
                this.Vec = FlatSharp.Compiler.Generated.CloneHelpers_f6276915322e4547a2a8caae563efcb7.Clone(source.Vec);
                this.Union = FlatSharp.Compiler.Generated.CloneHelpers_f6276915322e4547a2a8caae563efcb7.Clone(source.Union);
                this.UnionVec = FlatSharp.Compiler.Generated.CloneHelpers_f6276915322e4547a2a8caae563efcb7.Clone(source.UnionVec);
                this.OnInitialized(null);
            }
        }

        partial void OnInitialized(FlatBufferDeserializationContext? context);

        protected void OnFlatSharpDeserialized(FlatBufferDeserializationContext? context) => this.OnInitialized(context);

        [FlatBufferItemAttribute(0)]
        public virtual IList<global::BenchmarkCore.Vec3>? Points { get; set; }

        [FlatBufferItemAttribute(1)]
        public virtual global::BenchmarkCore.Vec3? Vec { get; set; }

        [FlatBufferItemAttribute(2)]
        public virtual global::BenchmarkCore.Union? Union { get; set; }

        [FlatBufferItemAttribute(4)]
        public virtual IList<global::BenchmarkCore.Union>? UnionVec { get; set; }

        public static ISerializer<BenchmarkCore.SomeTable> Serializer { get; } = new GeneratedSerializer().AsISerializer();

        ISerializer IFlatBufferSerializable.Serializer => Serializer;
        ISerializer<BenchmarkCore.SomeTable> IFlatBufferSerializable<BenchmarkCore.SomeTable>.Serializer => Serializer;

        #region Serializer for BenchmarkCore.SomeTable

        [FlatSharpGeneratedSerializerAttribute(FlatBufferDeserializationOption.VectorCache)]
        private sealed class GeneratedSerializer : IGeneratedSerializer<BenchmarkCore.SomeTable>
        {
            // Method generated to help AOT compilers make good decisions about generics.
            public void __AotHelper()
            {
                checked
                {
                    this.Write<ISpanWriter>(default!, new byte[10], default!, default!, default!);
                    this.Write<SpanWriter>(default!, new byte[10], default!, default!, default!);

                    this.Parse<IInputBuffer>(default!, 0);
                    this.Parse<MemoryInputBuffer.Wrapper>(default!, 0);
                    this.Parse<MemoryInputBuffer>(default!, 0);
                    this.Parse<ReadOnlyMemoryInputBuffer.Wrapper>(default!, 0);
                    this.Parse<ReadOnlyMemoryInputBuffer>(default!, 0);
                    this.Parse<ArrayInputBuffer.Wrapper>(default!, 0);
                    this.Parse<ArrayInputBuffer>(default!, 0);

#if FLATSHARP_UNSAFE
                        this.Parse<FlatSharp.Unsafe.UnsafeArrayInputBuffer>(default!, 0);
                        this.Parse<FlatSharp.Unsafe.UnsafeArrayInputBuffer.Wrapper>(default!, 0);
                        this.Parse<FlatSharp.Unsafe.UnsafeMemoryInputBuffer>(default!, 0);
                        this.Parse<FlatSharp.Unsafe.UnsafeMemoryInputBuffer.Wrapper>(default!, 0);
                        this.Write<FlatSharp.Unsafe.UnsafeSpanWriter>(default!, new byte[10], default!, default!, default!);
                        this.Write<FlatSharp.Unsafe.UnsafeSpanWriter.Wrapper>(default!, new byte[10], default!, default!, default!);
#endif

                    throw new InvalidOperationException("__AotHelper is not intended to be invoked");
                }
            }

            public void Write<TSpanWriter>(TSpanWriter writer, Span<byte> target, BenchmarkCore.SomeTable root, int offset, SerializationContext context)
                where TSpanWriter : ISpanWriter
            {
                checked
                {
                    WriteInlineValueOf_78e084df621240d9bce03163892be088(writer, target, root, offset, context);
                }
            }

            public int GetMaxSize(BenchmarkCore.SomeTable root)
            {
                checked
                {
                    return GetMaxSizeOf_78e084df621240d9bce03163892be088(root);
                }
            }

            public BenchmarkCore.SomeTable Parse<TInputBuffer>(TInputBuffer buffer, int offset)
                where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return Read_78e084df621240d9bce03163892be088(buffer, offset);
                }
            }

            public void Recycle(BenchmarkCore.SomeTable root)
            {
                checked
                {
                    Recycle_78e084df621240d9bce03163892be088(root);
                }
            }

            private static int GetMaxSizeOf_78e084df621240d9bce03163892be088(BenchmarkCore.SomeTable value)
            {
                checked
                {

                    int runningSum = 51 + 17;
                    var index0Value = value.Points;

                    if (!(index0Value is null))
                    {
                        runningSum += GetMaxSizeOf_b0c8f4f5bf2f437e802a80db3d33eada(index0Value);
                    }
                    var index2Value = value.Union;

                    if (!(index2Value is null))
                    {
                        runningSum += GetMaxSizeOf_e567f1fc8fb34d8d9c6d88b266bfeb0b(index2Value);
                    }
                    var index4Value = value.UnionVec;

                    if (!(index4Value is null))
                    {
                        runningSum += GetMaxSizeOf_b0afeab74d2c47c6a5dac0836790ec7b(index4Value);
                    }
                    return runningSum;

                }
            }

            private static BenchmarkCore.SomeTable Read_78e084df621240d9bce03163892be088<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return tableReader_67358b930c2b4478ba6adfb353a2d589<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset));
                }
            }

            private sealed class tableReader_67358b930c2b4478ba6adfb353a2d589<TInputBuffer>
                : BenchmarkCore.SomeTable
                , FlatSharp.IFlatBufferDeserializedObject
                where TInputBuffer : IInputBuffer
            {
                private static readonly FlatSharp.FlatBufferDeserializationContext __CtorContext
                    = new FlatSharp.FlatBufferDeserializationContext(FlatSharp.FlatBufferDeserializationOption.VectorCache);



                private TInputBuffer __buffer;
                private int __offset;
                private int __vtableOffset;
                private int __vtableMaxIndex;
                private byte __mask0;
                private System.Collections.Generic.IList<BenchmarkCore.Vec3>? __index0Value;
                private BenchmarkCore.Vec3? __index1Value;
                private BenchmarkCore.Union? __index2Value;
                private System.Collections.Generic.IList<BenchmarkCore.Union>? __index4Value;

                public static tableReader_67358b930c2b4478ba6adfb353a2d589<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset)
                {
                    checked
                    {

                        var item = new tableReader_67358b930c2b4478ba6adfb353a2d589<TInputBuffer>(buffer, offset);
                        return item;

                    }
                }

                private tableReader_67358b930c2b4478ba6adfb353a2d589(TInputBuffer buffer, int offset) : base(__CtorContext)
                {
                    checked
                    {
                        this.__buffer = buffer;
                        this.__offset = offset;
                        buffer.InitializeVTable(offset, out var __vtableLocation, out var __vtableMaxIndex);
                        this.__vtableOffset = __vtableLocation;
                        this.__vtableMaxIndex = __vtableMaxIndex;
                        base.OnFlatSharpDeserialized(__CtorContext);
                    }
                }

                System.Type IFlatBufferDeserializedObject.TableOrStructType => typeof(BenchmarkCore.SomeTable);
                FlatSharp.FlatBufferDeserializationContext IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
                FlatSharp.IInputBuffer? IFlatBufferDeserializedObject.InputBuffer => this.__buffer;

                void IRecyclable.DangerousRecycle()
                {
                    checked
                    {
                        Recycle_b0c8f4f5bf2f437e802a80db3d33eada(this.__index0Value);
                        Recycle_e2acb6b6c7da4e5882d88e6106ae5815(this.__index1Value);
                        Recycle_e567f1fc8fb34d8d9c6d88b266bfeb0b(this.__index2Value);
                        Recycle_b0afeab74d2c47c6a5dac0836790ec7b(this.__index4Value);

                    }
                }

                public override System.Collections.Generic.IList<BenchmarkCore.Vec3>? Points
                {
                    get
                    {
                        checked
                        {

                            if ((this.__mask0 & (byte)1) == 0)
                            {
                                this.__index0Value = ReadIndex0Value(this.__buffer, this.__offset, this.__vtableOffset, this.__vtableMaxIndex);
                                this.__mask0 |= (byte)1;
                            }
                            return this.__index0Value;

                        }
                    }

                    set
                    {
                        checked
                        {
                            throw new NotMutableException();
                        }
                    }
                }

                public override BenchmarkCore.Vec3? Vec
                {
                    get
                    {
                        checked
                        {

                            if ((this.__mask0 & (byte)2) == 0)
                            {
                                this.__index1Value = ReadIndex1Value(this.__buffer, this.__offset, this.__vtableOffset, this.__vtableMaxIndex);
                                this.__mask0 |= (byte)2;
                            }
                            return this.__index1Value;

                        }
                    }

                    set
                    {
                        checked
                        {
                            throw new NotMutableException();
                        }
                    }
                }

                public override BenchmarkCore.Union? Union
                {
                    get
                    {
                        checked
                        {

                            if ((this.__mask0 & (byte)4) == 0)
                            {
                                this.__index2Value = ReadIndex2Value(this.__buffer, this.__offset, this.__vtableOffset, this.__vtableMaxIndex);
                                this.__mask0 |= (byte)4;
                            }
                            return this.__index2Value;

                        }
                    }

                    set
                    {
                        checked
                        {
                            throw new NotMutableException();
                        }
                    }
                }

                public override System.Collections.Generic.IList<BenchmarkCore.Union>? UnionVec
                {
                    get
                    {
                        checked
                        {

                            if ((this.__mask0 & (byte)16) == 0)
                            {
                                this.__index4Value = ReadIndex4Value(this.__buffer, this.__offset, this.__vtableOffset, this.__vtableMaxIndex);
                                this.__mask0 |= (byte)16;
                            }
                            return this.__index4Value;

                        }
                    }

                    set
                    {
                        checked
                        {
                            throw new NotMutableException();
                        }
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<BenchmarkCore.Vec3>? ReadIndex0Value(
                    TInputBuffer buffer,
                    int offset,
                    int vtableOffset,
                    int maxVtableIndex)
                {
                    checked
                    {

                        if (0 > maxVtableIndex)
                        {
                            return null;
                        }

                        ushort relativeOffset = buffer.ReadUShort(vtableOffset + 4);
                        if (relativeOffset == 0)
                        {
                            return null;
                        }

                        int absoluteLocation = offset + relativeOffset;
                        return Read_b0c8f4f5bf2f437e802a80db3d33eada(buffer, absoluteLocation); ;
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static BenchmarkCore.Vec3? ReadIndex1Value(
                    TInputBuffer buffer,
                    int offset,
                    int vtableOffset,
                    int maxVtableIndex)
                {
                    checked
                    {

                        if (1 > maxVtableIndex)
                        {
                            return null;
                        }

                        ushort relativeOffset = buffer.ReadUShort(vtableOffset + 6);
                        if (relativeOffset == 0)
                        {
                            return null;
                        }

                        int absoluteLocation = offset + relativeOffset;
                        return Read_e2acb6b6c7da4e5882d88e6106ae5815(buffer, absoluteLocation); ;
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static BenchmarkCore.Union? ReadIndex2Value(
                    TInputBuffer buffer,
                    int offset,
                    int vtableOffset,
                    int maxVtableIndex)
                {
                    checked
                    {

                        if (3 > maxVtableIndex)
                        {
                            return null;
                        }


                        ushort relativeOffset0 = buffer.ReadUShort(vtableOffset + 8);
                        if (relativeOffset0 == 0)
                        {
                            return null;
                        }


                        ushort relativeOffset1 = buffer.ReadUShort(vtableOffset + 10);
                        if (relativeOffset1 == 0)
                        {
                            return null;
                        }


                        var absoluteLocations = (relativeOffset0 + offset, relativeOffset1 + offset);
                        return Read_e567f1fc8fb34d8d9c6d88b266bfeb0b(buffer, ref absoluteLocations); ;
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.Collections.Generic.IList<BenchmarkCore.Union>? ReadIndex4Value(
                    TInputBuffer buffer,
                    int offset,
                    int vtableOffset,
                    int maxVtableIndex)
                {
                    checked
                    {

                        if (5 > maxVtableIndex)
                        {
                            return null;
                        }


                        ushort relativeOffset0 = buffer.ReadUShort(vtableOffset + 12);
                        if (relativeOffset0 == 0)
                        {
                            return null;
                        }


                        ushort relativeOffset1 = buffer.ReadUShort(vtableOffset + 14);
                        if (relativeOffset1 == 0)
                        {
                            return null;
                        }


                        var absoluteLocations = (relativeOffset0 + offset, relativeOffset1 + offset);
                        return Read_b0afeab74d2c47c6a5dac0836790ec7b(buffer, ref absoluteLocations); ;
                    }
                }
            }



            private static void WriteInlineValueOf_78e084df621240d9bce03163892be088<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                BenchmarkCore.SomeTable value,
                int offset
                , SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int tableStart = context.AllocateSpace(48, sizeof(int));
                    spanWriter.WriteUOffset(span, offset, tableStart);
                    int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                    int vtableLength = 4;
                    Span<byte> vtable = stackalloc byte[16];

                    var index0Value = value.Points;
                    var index1Value = value.Vec;
                    var index2Value = value.Union;
                    var index4Value = value.UnionVec;

                    var index4Offset = tableStart;
                    if (!(index4Value is null))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index4Offset = currentOffset;
                        currentOffset += 4;


                    }

                    spanWriter.WriteUShort(vtable, (ushort)(index4Offset - tableStart), 12);

                    var index5Offset = tableStart;
                    if (!(index4Value is null))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index5Offset = currentOffset;
                        currentOffset += 4;

                        vtableLength = 16;
                    }

                    spanWriter.WriteUShort(vtable, (ushort)(index5Offset - tableStart), 14);

                    var index3Offset = tableStart;
                    if (!(index2Value is null))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index3Offset = currentOffset;
                        currentOffset += 4;


                        if (12 > vtableLength)
                        {
                            vtableLength = 12;
                        }
                    }

                    spanWriter.WriteUShort(vtable, (ushort)(index3Offset - tableStart), 10);

                    var index0Offset = tableStart;
                    if (!(index0Value is null))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index0Offset = currentOffset;
                        currentOffset += 4;


                        if (6 > vtableLength)
                        {
                            vtableLength = 6;
                        }
                    }

                    spanWriter.WriteUShort(vtable, (ushort)(index0Offset - tableStart), 4);

                    var index1Offset = tableStart;
                    if (!(index1Value is null))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index1Offset = currentOffset;
                        currentOffset += 12;


                        WriteInlineValueOf_e2acb6b6c7da4e5882d88e6106ae5815(spanWriter, span, index1Value!, index1Offset);


                        if (8 > vtableLength)
                        {
                            vtableLength = 8;
                        }
                    }

                    spanWriter.WriteUShort(vtable, (ushort)(index1Offset - tableStart), 6);

                    var index2Offset = tableStart;
                    if (!(index2Value is null))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 1);
                        index2Offset = currentOffset;
                        currentOffset += 1;


                    }

                    spanWriter.WriteUShort(vtable, (ushort)(index2Offset - tableStart), 8);
                    int tableLength = currentOffset - tableStart;
                    context.Offset -= 48 - tableLength;
                    spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0);
                    spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort));
                    int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                    spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart);

                    if (index4Offset != tableStart)
                    {

                        var offsetTuple = (index4Offset, index5Offset);
                        WriteInlineValueOf_b0afeab74d2c47c6a5dac0836790ec7b(spanWriter, span, index4Value!, ref offsetTuple, context);

                    }


                    if (index0Offset != tableStart)
                    {


                        WriteInlineValueOf_b0c8f4f5bf2f437e802a80db3d33eada(spanWriter, span, index0Value!, index0Offset, context);

                    }


                    if (index2Offset != tableStart)
                    {

                        var offsetTuple = (index2Offset, index3Offset);
                        WriteInlineValueOf_e567f1fc8fb34d8d9c6d88b266bfeb0b(spanWriter, span, index2Value!, ref offsetTuple, context);

                    }

                }
            }

            private static void Recycle_78e084df621240d9bce03163892be088(BenchmarkCore.SomeTable? value)
            {
                checked
                {

                    if (value is IFlatBufferDeserializedObject deserializedObj)
                    {
                        deserializedObj.DangerousRecycle();
                    }

                }
            }

            private static int GetMaxSizeOf_b0c8f4f5bf2f437e802a80db3d33eada(System.Collections.Generic.IList<BenchmarkCore.Vec3> value)
            {
                checked
                {
                    return 10 + (12 * value.Count);
                }
            }

            private static System.Collections.Generic.IList<BenchmarkCore.Vec3> Read_b0c8f4f5bf2f437e802a80db3d33eada<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return (new FlatBufferVector_716468a6f84046d3998e6d7579eda96f<TInputBuffer>(
                            buffer,
                            offset + buffer.ReadUOffset(offset),
                            12)).FlatBufferVectorToList().AsReadOnly();
                }
            }

            public sealed class FlatBufferVector_716468a6f84046d3998e6d7579eda96f<TInputBuffer> : FlatBufferVector<BenchmarkCore.Vec3, TInputBuffer>
                where TInputBuffer : IInputBuffer
            {
                public FlatBufferVector_716468a6f84046d3998e6d7579eda96f(
                    TInputBuffer memory,
                    int offset,
                    int itemSize) : base(memory, offset, itemSize)
                {
                    checked
                    {
                    }
                }

                protected override BenchmarkCore.Vec3 ParseItem(TInputBuffer memory, int offset)
                {
                    checked
                    {
                        return Read_e2acb6b6c7da4e5882d88e6106ae5815(memory, offset);
                    }
                }
            }



            private static void WriteInlineValueOf_b0c8f4f5bf2f437e802a80db3d33eada<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                System.Collections.Generic.IList<BenchmarkCore.Vec3> value,
                int offset
                , SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int count = value.Count;
                    int vectorOffset = context.AllocateVector(4, count, 12);
                    spanWriter.WriteUOffset(span, offset, vectorOffset);
                    spanWriter.WriteInt(span, count, vectorOffset);
                    vectorOffset += sizeof(int);


                    if (value is BenchmarkCore.Vec3[] array)
                    {

                        for (int i = 0; i < array.Length; i = unchecked(i + 1))
                        {
                            var current = array[i];

                            SerializationHelpers.EnsureNonNull(current);
                            WriteInlineValueOf_e2acb6b6c7da4e5882d88e6106ae5815(spanWriter, span, current, vectorOffset);
                            vectorOffset += 12;
                        }
                    }
                    else if (value is List<BenchmarkCore.Vec3> realList)
                    {

                        int i;
                        for (i = 0; i < count; i = unchecked(i + 1))
                        {
                            var current = realList[i];

                            SerializationHelpers.EnsureNonNull(current);
                            WriteInlineValueOf_e2acb6b6c7da4e5882d88e6106ae5815(spanWriter, span, current, vectorOffset);
                            vectorOffset += 12;
                        }
                    }
                    else
                    {

                        int i;
                        for (i = 0; i < count; i = unchecked(i + 1))
                        {
                            var current = value[i];

                            SerializationHelpers.EnsureNonNull(current);
                            WriteInlineValueOf_e2acb6b6c7da4e5882d88e6106ae5815(spanWriter, span, current, vectorOffset);
                            vectorOffset += 12;
                        }
                    }
                }
            }

            private static void Recycle_b0c8f4f5bf2f437e802a80db3d33eada(System.Collections.Generic.IList<BenchmarkCore.Vec3>? value)
            {
                checked
                {

                    if (value is null)
                    {
                        return;
                    }

                    int count = value.Count;

                    if (value is BenchmarkCore.Vec3[] array)
                    {

                        for (int i = 0; i < array.Length; i = unchecked(i + 1))
                        {
                            var current = array[i];
                            Recycle_e2acb6b6c7da4e5882d88e6106ae5815(current);
                        }
                    }
                    else if (value is List<BenchmarkCore.Vec3> realList)
                    {

                        int i;
                        for (i = 0; i < count; i = unchecked(i + 1))
                        {
                            var current = realList[i];
                            Recycle_e2acb6b6c7da4e5882d88e6106ae5815(current);
                        }
                    }
                    else
                    {

                        int i;
                        for (i = 0; i < count; i = unchecked(i + 1))
                        {
                            var current = value[i];
                            Recycle_e2acb6b6c7da4e5882d88e6106ae5815(current);
                        }
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static int GetMaxSizeOf_e2acb6b6c7da4e5882d88e6106ae5815(BenchmarkCore.Vec3 value)
            {
                checked
                {
                    return 15;
                }
            }

            private static BenchmarkCore.Vec3 Read_e2acb6b6c7da4e5882d88e6106ae5815<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return structReader_ddd0c68f1f0d45f88b06c67b52361f1e<TInputBuffer>.GetOrCreate(buffer, offset);
                }
            }

            private sealed class structReader_ddd0c68f1f0d45f88b06c67b52361f1e<TInputBuffer>
                : BenchmarkCore.Vec3
                , FlatSharp.IFlatBufferDeserializedObject
                where TInputBuffer : IInputBuffer
            {
                private static readonly FlatSharp.FlatBufferDeserializationContext __CtorContext
                    = new FlatSharp.FlatBufferDeserializationContext(FlatSharp.FlatBufferDeserializationOption.VectorCache);


                private static readonly IFlatSharpObjectPool<structReader_ddd0c68f1f0d45f88b06c67b52361f1e<TInputBuffer>> __Pool =
                    FlatSharpRuntimeSettings.ObjectPoolFactory.Create<structReader_ddd0c68f1f0d45f88b06c67b52361f1e<TInputBuffer>>(1000);


                private TInputBuffer __buffer;
                private int __offset;
                private string? __poolDiag_allocationStack;
                private string? __poolDiag_releaseStack;
                private bool __poolDiag_released;
                private byte __mask0;
                private System.Single __index0Value;
                private System.Single __index1Value;
                private System.Single __index2Value;

                public static structReader_ddd0c68f1f0d45f88b06c67b52361f1e<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset)
                {
                    checked
                    {

                        if (!__Pool.TryTake(out var item))
                        {
                            item = new structReader_ddd0c68f1f0d45f88b06c67b52361f1e<TInputBuffer>();
                        }

                        item.Initialize(buffer, offset);

                        item.__poolDiag_released = false;
                        item.__poolDiag_allocationStack = null;
                        item.__poolDiag_releaseStack = null;

                        if (FlatSharpRuntimeSettings.EnableRecyclingDiagnostics)
                        {
                            item.__poolDiag_allocationStack = Environment.StackTrace;
                        }

                        return item;

                    }
                }

                private structReader_ddd0c68f1f0d45f88b06c67b52361f1e() : base(__CtorContext)
                {
                    checked
                    {
                        this.__buffer = default!;
                        this.__offset = default!;
                        this.__mask0 = default!;
                        this.__index0Value = default!;
                        this.__index1Value = default!;
                        this.__index2Value = default!;
                    }
                }

                private void Initialize(TInputBuffer buffer, int offset)
                {
                    checked
                    {
                        this.__buffer = buffer;
                        this.__offset = offset;
                        base.OnFlatSharpDeserialized(__CtorContext);
                    }
                }

                System.Type IFlatBufferDeserializedObject.TableOrStructType => typeof(BenchmarkCore.Vec3);
                FlatSharp.FlatBufferDeserializationContext IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
                FlatSharp.IInputBuffer? IFlatBufferDeserializedObject.InputBuffer => this.__buffer;

                void IRecyclable.DangerousRecycle()
                {
                    checked
                    {


                        if (this.__poolDiag_released)
                        {
                            throw new InvalidOperationException(
                                $"FlatSharp object recycled twice. Type = 'BenchmarkCore.Vec3', \r\n\r\n AllocationStack = '{this.__poolDiag_allocationStack}', \r\n\r\n ReleaseStack = '{this.__poolDiag_releaseStack}'");
                        }

                        this.__poolDiag_released = true;
                        if (FlatSharpRuntimeSettings.EnableRecyclingDiagnostics)
                        {
                            this.__poolDiag_releaseStack = Environment.StackTrace;
                        }
                        else
                        {
                            this.__buffer = default!;
                            this.__offset = default!;
                            this.__mask0 = default!;
                            this.__index0Value = default!;
                            this.__index1Value = default!;
                            this.__index2Value = default!;
                            __Pool.Return(this);
                        }

                    }
                }

                public override System.Single X
                {
                    get
                    {
                        checked
                        {

                            if (this.__poolDiag_released)
                            {
                                throw new InvalidOperationException(
                                    $"FlatSharp object used after recycle. Type = 'BenchmarkCore.Vec3', \r\n\r\n AllocationStack = '{this.__poolDiag_allocationStack}', \r\n\r\n ReleaseStack = '{this.__poolDiag_releaseStack}'");
                            }

                            if ((this.__mask0 & (byte)1) == 0)
                            {
                                this.__index0Value = ReadIndex0Value(this.__buffer, this.__offset, default, default);
                                this.__mask0 |= (byte)1;
                            }
                            return this.__index0Value;


                        }
                    }

                    set
                    {
                        checked
                        {

                            if (this.__poolDiag_released)
                            {
                                throw new InvalidOperationException(
                                    $"FlatSharp object used after recycle. Type = 'BenchmarkCore.Vec3', \r\n\r\n AllocationStack = '{this.__poolDiag_allocationStack}', \r\n\r\n ReleaseStack = '{this.__poolDiag_releaseStack}'");
                            }
                            throw new NotMutableException();

                        }
                    }
                }

                public override System.Single Y
                {
                    get
                    {
                        checked
                        {

                            if (this.__poolDiag_released)
                            {
                                throw new InvalidOperationException(
                                    $"FlatSharp object used after recycle. Type = 'BenchmarkCore.Vec3', \r\n\r\n AllocationStack = '{this.__poolDiag_allocationStack}', \r\n\r\n ReleaseStack = '{this.__poolDiag_releaseStack}'");
                            }

                            if ((this.__mask0 & (byte)2) == 0)
                            {
                                this.__index1Value = ReadIndex1Value(this.__buffer, this.__offset, default, default);
                                this.__mask0 |= (byte)2;
                            }
                            return this.__index1Value;


                        }
                    }

                    set
                    {
                        checked
                        {

                            if (this.__poolDiag_released)
                            {
                                throw new InvalidOperationException(
                                    $"FlatSharp object used after recycle. Type = 'BenchmarkCore.Vec3', \r\n\r\n AllocationStack = '{this.__poolDiag_allocationStack}', \r\n\r\n ReleaseStack = '{this.__poolDiag_releaseStack}'");
                            }
                            throw new NotMutableException();

                        }
                    }
                }

                public override System.Single Z
                {
                    get
                    {
                        checked
                        {

                            if (this.__poolDiag_released)
                            {
                                throw new InvalidOperationException(
                                    $"FlatSharp object used after recycle. Type = 'BenchmarkCore.Vec3', \r\n\r\n AllocationStack = '{this.__poolDiag_allocationStack}', \r\n\r\n ReleaseStack = '{this.__poolDiag_releaseStack}'");
                            }

                            if ((this.__mask0 & (byte)4) == 0)
                            {
                                this.__index2Value = ReadIndex2Value(this.__buffer, this.__offset, default, default);
                                this.__mask0 |= (byte)4;
                            }
                            return this.__index2Value;


                        }
                    }

                    set
                    {
                        checked
                        {

                            if (this.__poolDiag_released)
                            {
                                throw new InvalidOperationException(
                                    $"FlatSharp object used after recycle. Type = 'BenchmarkCore.Vec3', \r\n\r\n AllocationStack = '{this.__poolDiag_allocationStack}', \r\n\r\n ReleaseStack = '{this.__poolDiag_releaseStack}'");
                            }
                            throw new NotMutableException();

                        }
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.Single ReadIndex0Value(
                    TInputBuffer buffer,
                    int offset,
                    int vtableOffset,
                    int maxVtableIndex)
                {
                    checked
                    {
                        return Read_b0dfa5111e944840987b83d44a007c21(buffer, offset + 0); ;
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.Single ReadIndex1Value(
                    TInputBuffer buffer,
                    int offset,
                    int vtableOffset,
                    int maxVtableIndex)
                {
                    checked
                    {
                        return Read_b0dfa5111e944840987b83d44a007c21(buffer, offset + 4); ;
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.Single ReadIndex2Value(
                    TInputBuffer buffer,
                    int offset,
                    int vtableOffset,
                    int maxVtableIndex)
                {
                    checked
                    {
                        return Read_b0dfa5111e944840987b83d44a007c21(buffer, offset + 8); ;
                    }
                }
            }



            private static void WriteInlineValueOf_e2acb6b6c7da4e5882d88e6106ae5815<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                BenchmarkCore.Vec3 value,
                int offset
                ) where TSpanWriter : ISpanWriter
            {
                checked
                {
                    Span<byte> scopedSpan = span.Slice(offset, 12);

                    if (value is null)
                    {
                        scopedSpan.Clear();
                        return;
                    }

                    WriteInlineValueOf_b0dfa5111e944840987b83d44a007c21(spanWriter, scopedSpan, value.X, 0);
                    WriteInlineValueOf_b0dfa5111e944840987b83d44a007c21(spanWriter, scopedSpan, value.Y, 4);
                    WriteInlineValueOf_b0dfa5111e944840987b83d44a007c21(spanWriter, scopedSpan, value.Z, 8);
                }
            }

            private static void Recycle_e2acb6b6c7da4e5882d88e6106ae5815(BenchmarkCore.Vec3? value)
            {
                checked
                {

                    if (value is IFlatBufferDeserializedObject deserializedObj)
                    {
                        deserializedObj.DangerousRecycle();
                    }

                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static int GetMaxSizeOf_b0dfa5111e944840987b83d44a007c21(System.Single value)
            {
                checked
                {
                    return 7;
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Single Read_b0dfa5111e944840987b83d44a007c21<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return buffer.ReadFloat(offset);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static void WriteInlineValueOf_b0dfa5111e944840987b83d44a007c21<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                System.Single value,
                int offset
                ) where TSpanWriter : ISpanWriter
            {
                checked
                {
                    spanWriter.WriteFloat(span, value, offset);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static void Recycle_b0dfa5111e944840987b83d44a007c21(System.Single value)
            {
                checked
                {

                }
            }

            private static int GetMaxSizeOf_e567f1fc8fb34d8d9c6d88b266bfeb0b(BenchmarkCore.Union value)
            {
                checked
                {

                    switch (value.Discriminator)
                    {

                        case 1:
                            return 7 + GetMaxSizeOf_e2acb6b6c7da4e5882d88e6106ae5815(value.Item1);

                        case 2:
                            return 7 + GetMaxSizeOf_2f0caa4413af4242a557fb3a69f8d855(value.Item2);
                        default:
                            throw new System.InvalidOperationException("Exception determining type of union. Discriminator = " + value.Discriminator);
                    }

                }
            }

            private static BenchmarkCore.Union Read_e567f1fc8fb34d8d9c6d88b266bfeb0b<TInputBuffer>(
                TInputBuffer buffer,
                ref (int offset0, int offset1) offset) where TInputBuffer : IInputBuffer
            {
                checked
                {

                    byte discriminator = buffer.ReadByte(offset.offset0);
                    int offsetLocation = offset.offset1;
                    if (discriminator != 0 && offsetLocation == 0)
                        throw new System.IO.InvalidDataException("FlatBuffer union had discriminator set but no offset.");

                    switch (discriminator)
                    {

                        case 1:
                            offsetLocation += buffer.ReadUOffset(offsetLocation);
                            return new BenchmarkCore.Union(Read_e2acb6b6c7da4e5882d88e6106ae5815(buffer, offsetLocation));


                        case 2:
                            offsetLocation += buffer.ReadUOffset(offsetLocation);
                            return new BenchmarkCore.Union(Read_2f0caa4413af4242a557fb3a69f8d855(buffer, offsetLocation));

                        default:
                            throw new System.InvalidOperationException("Exception parsing union 'BenchmarkCore.Union'. Discriminator = " + discriminator);
                    }

                }
            }

            private static void WriteInlineValueOf_e567f1fc8fb34d8d9c6d88b266bfeb0b<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                BenchmarkCore.Union value,
                ref (int offset0, int offset1) offset
                , SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    byte discriminatorValue = value.Discriminator;
                    spanWriter.WriteByte(
                        span,
                        discriminatorValue,
                        offset.offset0);

                    switch (discriminatorValue)
                    {

                        case 1:
                            {

                                var writeOffset = context.AllocateSpace(12, 4);
                                spanWriter.WriteUOffset(span, offset.offset1, writeOffset);
                                WriteInlineValueOf_e2acb6b6c7da4e5882d88e6106ae5815(spanWriter, span, value.Item1, writeOffset);
                            }
                            break;

                        case 2:
                            {

                                var writeOffset = context.AllocateSpace(4, 4);
                                spanWriter.WriteUOffset(span, offset.offset1, writeOffset);
                                WriteInlineValueOf_2f0caa4413af4242a557fb3a69f8d855(spanWriter, span, value.Item2, writeOffset);
                            }
                            break;
                        default: throw new InvalidOperationException("Unexpected");
                    }
                }
            }

            private static void Recycle_e567f1fc8fb34d8d9c6d88b266bfeb0b(BenchmarkCore.Union? value)
            {
                checked
                {

                    if (!(value is null))
                    {
                        switch (value.Discriminator)
                        {
                            case 1: Recycle_e2acb6b6c7da4e5882d88e6106ae5815(value.Item1); break;
                        }
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static int GetMaxSizeOf_2f0caa4413af4242a557fb3a69f8d855(BenchmarkCore.NotRecycleable value)
            {
                checked
                {
                    return 7;
                }
            }

            private static BenchmarkCore.NotRecycleable Read_2f0caa4413af4242a557fb3a69f8d855<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return structReader_19727b335be04118a078e7afca0c5788<TInputBuffer>.GetOrCreate(buffer, offset);
                }
            }

            private sealed class structReader_19727b335be04118a078e7afca0c5788<TInputBuffer>
                : BenchmarkCore.NotRecycleable
                , FlatSharp.IFlatBufferDeserializedObject
                where TInputBuffer : IInputBuffer
            {
                private static readonly FlatSharp.FlatBufferDeserializationContext __CtorContext
                    = new FlatSharp.FlatBufferDeserializationContext(FlatSharp.FlatBufferDeserializationOption.VectorCache);



                private TInputBuffer __buffer;
                private int __offset;
                private byte __mask0;
                private System.Int32 __index0Value;

                public static structReader_19727b335be04118a078e7afca0c5788<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset)
                {
                    checked
                    {

                        var item = new structReader_19727b335be04118a078e7afca0c5788<TInputBuffer>(buffer, offset);
                        return item;

                    }
                }

                private structReader_19727b335be04118a078e7afca0c5788(TInputBuffer buffer, int offset) : base(__CtorContext)
                {
                    checked
                    {
                        this.__buffer = buffer;
                        this.__offset = offset;
                        base.OnFlatSharpDeserialized(__CtorContext);
                    }
                }

                System.Type IFlatBufferDeserializedObject.TableOrStructType => typeof(BenchmarkCore.NotRecycleable);
                FlatSharp.FlatBufferDeserializationContext IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
                FlatSharp.IInputBuffer? IFlatBufferDeserializedObject.InputBuffer => this.__buffer;

                void IRecyclable.DangerousRecycle()
                {
                    checked
                    {


                    }
                }

                public override System.Int32 Value
                {
                    get
                    {
                        checked
                        {

                            if ((this.__mask0 & (byte)1) == 0)
                            {
                                this.__index0Value = ReadIndex0Value(this.__buffer, this.__offset, default, default);
                                this.__mask0 |= (byte)1;
                            }
                            return this.__index0Value;

                        }
                    }

                    set
                    {
                        checked
                        {
                            throw new NotMutableException();
                        }
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.Int32 ReadIndex0Value(
                    TInputBuffer buffer,
                    int offset,
                    int vtableOffset,
                    int maxVtableIndex)
                {
                    checked
                    {
                        return Read_5aaafdb735b24eaa86c9e673bff9f2c9(buffer, offset + 0); ;
                    }
                }
            }



            private static void WriteInlineValueOf_2f0caa4413af4242a557fb3a69f8d855<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                BenchmarkCore.NotRecycleable value,
                int offset
                ) where TSpanWriter : ISpanWriter
            {
                checked
                {
                    Span<byte> scopedSpan = span.Slice(offset, 4);

                    if (value is null)
                    {
                        scopedSpan.Clear();
                        return;
                    }

                    WriteInlineValueOf_5aaafdb735b24eaa86c9e673bff9f2c9(spanWriter, scopedSpan, value.Value, 0);
                }
            }

            private static void Recycle_2f0caa4413af4242a557fb3a69f8d855(BenchmarkCore.NotRecycleable? value)
            {
                checked
                {

                    if (value is IFlatBufferDeserializedObject deserializedObj)
                    {
                        deserializedObj.DangerousRecycle();
                    }

                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static int GetMaxSizeOf_5aaafdb735b24eaa86c9e673bff9f2c9(System.Int32 value)
            {
                checked
                {
                    return 7;
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Int32 Read_5aaafdb735b24eaa86c9e673bff9f2c9<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return buffer.ReadInt(offset);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static void WriteInlineValueOf_5aaafdb735b24eaa86c9e673bff9f2c9<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                System.Int32 value,
                int offset
                ) where TSpanWriter : ISpanWriter
            {
                checked
                {
                    spanWriter.WriteInt(span, value, offset);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static void Recycle_5aaafdb735b24eaa86c9e673bff9f2c9(System.Int32 value)
            {
                checked
                {

                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static int GetMaxSizeOf_fed2821b443e4d7f814e70fc6dd4f338(System.Byte value)
            {
                checked
                {
                    return 1;
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Byte Read_fed2821b443e4d7f814e70fc6dd4f338<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return buffer.ReadByte(offset);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static void WriteInlineValueOf_fed2821b443e4d7f814e70fc6dd4f338<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                System.Byte value,
                int offset
                ) where TSpanWriter : ISpanWriter
            {
                checked
                {
                    spanWriter.WriteByte(span, value, offset);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static void Recycle_fed2821b443e4d7f814e70fc6dd4f338(System.Byte value)
            {
                checked
                {

                }
            }

            private static int GetMaxSizeOf_b0afeab74d2c47c6a5dac0836790ec7b(System.Collections.Generic.IList<BenchmarkCore.Union> value)
            {
                checked
                {

                    int count = value.Count;
                    int length = 14 + (count * (sizeof(byte) + sizeof(int)));

                    for (int i = 0; i < count; ++i)
                    {
                        var current = value[i];
                        SerializationHelpers.EnsureNonNull(current);
                        length += GetMaxSizeOf_e567f1fc8fb34d8d9c6d88b266bfeb0b(current);
                    }

                    return length;
                }
            }

            private static System.Collections.Generic.IList<BenchmarkCore.Union> Read_b0afeab74d2c47c6a5dac0836790ec7b<TInputBuffer>(
                TInputBuffer buffer,
                ref (int offset0, int offset1) offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return (new FlatBufferUnionVector_903a9420c8ee407e8242d001d008b051<TInputBuffer>(
                            buffer,
                            offset.offset0 + buffer.ReadUOffset(offset.offset0),
                            offset.offset1 + buffer.ReadUOffset(offset.offset1))).FlatBufferVectorToList().AsReadOnly();
                }
            }

            public sealed class FlatBufferUnionVector_903a9420c8ee407e8242d001d008b051<TInputBuffer> : FlatBufferVectorOfUnion<BenchmarkCore.Union, TInputBuffer>
                where TInputBuffer : IInputBuffer
            {
                public FlatBufferUnionVector_903a9420c8ee407e8242d001d008b051(
                    TInputBuffer memory,
                    int discriminatorOffset,
                    int offsetVectorOffset) : base(memory, discriminatorOffset, offsetVectorOffset)
                {
                    checked
                    {
                    }
                }

                protected override BenchmarkCore.Union ParseItem(TInputBuffer memory, int discriminatorOffset, int offsetOffset)
                {
                    checked
                    {
                        var temp = (discriminatorOffset, offsetOffset);
                        return Read_e567f1fc8fb34d8d9c6d88b266bfeb0b(memory, ref temp);
                    }
                }
            }



            private static void WriteInlineValueOf_b0afeab74d2c47c6a5dac0836790ec7b<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                System.Collections.Generic.IList<BenchmarkCore.Union> value,
                ref (int offset0, int offset1) offset
                , SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int count = value.Count;
                    int discriminatorVectorOffset = context.AllocateVector(sizeof(byte), count, sizeof(byte));
                    spanWriter.WriteUOffset(span, offset.offset0, discriminatorVectorOffset);
                    spanWriter.WriteInt(span, count, discriminatorVectorOffset);
                    discriminatorVectorOffset += sizeof(int);

                    int offsetVectorOffset = context.AllocateVector(sizeof(int), count, sizeof(int));
                    spanWriter.WriteUOffset(span, offset.offset1, offsetVectorOffset);
                    spanWriter.WriteInt(span, count, offsetVectorOffset);
                    offsetVectorOffset += sizeof(int);

                    for (int i = 0; i < count; ++i)
                    {
                        var current = value[i];
                        SerializationHelpers.EnsureNonNull(current);

                        var tuple = (discriminatorVectorOffset, offsetVectorOffset);
                        WriteInlineValueOf_e567f1fc8fb34d8d9c6d88b266bfeb0b(spanWriter, span, current, ref tuple, context);

                        discriminatorVectorOffset++;
                        offsetVectorOffset += sizeof(int);
                    }
                }
            }

            private static void Recycle_b0afeab74d2c47c6a5dac0836790ec7b(System.Collections.Generic.IList<BenchmarkCore.Union>? value)
            {
                checked
                {

                    if (value is null)
                    {
                        return;
                    }

                    int count = value.Count;
                    for (int i = 0; i < count; ++i)
                    {
                        var current = value[i];
                        Recycle_e567f1fc8fb34d8d9c6d88b266bfeb0b(current);
                    }

                }
            }
        }

        #endregion
    }
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class Union : FlatBufferUnion<global::BenchmarkCore.Vec3, global::BenchmarkCore.NotRecycleable>
    {
        public enum ItemKind : byte
        {
            Vec3 = 1,
            NotRecycleable = 2,
        }


        public ItemKind Kind => (ItemKind)base.Discriminator;

        public Union(global::BenchmarkCore.Vec3 value) : base(value)
        {
            checked
            { }
        }

        public global::BenchmarkCore.Vec3 Vec3 => base.Item1;

        public Union(global::BenchmarkCore.NotRecycleable value) : base(value)
        {
            checked
            { }
        }

        public global::BenchmarkCore.NotRecycleable NotRecycleable => base.Item2;
        public new TReturn Switch<TState, TReturn>(
            TState state,
            Func<TState, TReturn> caseDefault
            , Func<TState, global::BenchmarkCore.Vec3, TReturn> caseVec3
            , Func<TState, global::BenchmarkCore.NotRecycleable, TReturn> caseNotRecycleable
        ) => base.Switch<TState, TReturn>(state, caseDefault, caseVec3, caseNotRecycleable);
        public new TReturn Switch<TReturn>(
            Func<TReturn> caseDefault
            , Func<global::BenchmarkCore.Vec3, TReturn> caseVec3
            , Func<global::BenchmarkCore.NotRecycleable, TReturn> caseNotRecycleable
        ) => base.Switch<TReturn>(caseDefault, caseVec3, caseNotRecycleable);
        public new void Switch<TState>(
            TState state,
            Action<TState> caseDefault
            , Action<TState, global::BenchmarkCore.Vec3> caseVec3
            , Action<TState, global::BenchmarkCore.NotRecycleable> caseNotRecycleable
        ) => base.Switch<TState>(state, caseDefault, caseVec3, caseNotRecycleable);
        public new void Switch(
            Action caseDefault
            , Action<global::BenchmarkCore.Vec3> caseVec3
            , Action<global::BenchmarkCore.NotRecycleable> caseNotRecycleable
        ) => base.Switch(caseDefault, caseVec3, caseNotRecycleable);
    }

    [FlatBufferStructAttribute(RecyclePoolSize = 1000)]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class Vec3
        : object
    {
        public Vec3()
        {
            checked
            {
                this.OnInitialized(null);
            }
        }

#pragma warning disable CS8618
        protected Vec3(FlatBufferDeserializationContext context)
        {
            checked
            {
            }
        }

#pragma warning restore CS8618
        public Vec3(Vec3 source)
        {
            checked
            {
                this.X = FlatSharp.Compiler.Generated.CloneHelpers_f6276915322e4547a2a8caae563efcb7.Clone(source.X);
                this.Y = FlatSharp.Compiler.Generated.CloneHelpers_f6276915322e4547a2a8caae563efcb7.Clone(source.Y);
                this.Z = FlatSharp.Compiler.Generated.CloneHelpers_f6276915322e4547a2a8caae563efcb7.Clone(source.Z);
                this.OnInitialized(null);
            }
        }

        partial void OnInitialized(FlatBufferDeserializationContext? context);

        protected void OnFlatSharpDeserialized(FlatBufferDeserializationContext? context) => this.OnInitialized(context);

        [FlatBufferItemAttribute(0)]
        public virtual System.Single X { get; set; }

        [FlatBufferItemAttribute(1)]
        public virtual System.Single Y { get; set; }

        [FlatBufferItemAttribute(2)]
        public virtual System.Single Z { get; set; }

    }
    [FlatBufferStructAttribute()]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class NotRecycleable
        : object
    {
        public NotRecycleable()
        {
            checked
            {
                this.OnInitialized(null);
            }
        }

#pragma warning disable CS8618
        protected NotRecycleable(FlatBufferDeserializationContext context)
        {
            checked
            {
            }
        }

#pragma warning restore CS8618
        public NotRecycleable(NotRecycleable source)
        {
            checked
            {
                this.Value = FlatSharp.Compiler.Generated.CloneHelpers_f6276915322e4547a2a8caae563efcb7.Clone(source.Value);
                this.OnInitialized(null);
            }
        }

        partial void OnInitialized(FlatBufferDeserializationContext? context);

        protected void OnFlatSharpDeserialized(FlatBufferDeserializationContext? context) => this.OnInitialized(context);

        [FlatBufferItemAttribute(0)]
        public virtual System.Int32 Value { get; set; }

    }
    [FlatBufferStructAttribute()]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class Struct
        : object
    {
        public Struct()
        {
            checked
            {
                this.Other = new BenchmarkCore.OtherStruct();
                this.OnInitialized(null);
            }
        }

#pragma warning disable CS8618
        protected Struct(FlatBufferDeserializationContext context)
        {
            checked
            {
            }
        }

#pragma warning restore CS8618
        public Struct(Struct source)
        {
            checked
            {
                this.Other = FlatSharp.Compiler.Generated.CloneHelpers_f6276915322e4547a2a8caae563efcb7.Clone(source.Other);
                this.Int = FlatSharp.Compiler.Generated.CloneHelpers_f6276915322e4547a2a8caae563efcb7.Clone(source.Int);
                this.OnInitialized(null);
            }
        }

        partial void OnInitialized(FlatBufferDeserializationContext? context);

        protected void OnFlatSharpDeserialized(FlatBufferDeserializationContext? context) => this.OnInitialized(context);

        [FlatBufferItemAttribute(0, WriteThrough = true)]
        public virtual global::BenchmarkCore.OtherStruct Other { get; set; }

        [FlatBufferItemAttribute(1, WriteThrough = true)]
        public virtual System.Int32 Int { get; set; }

    }
    [FlatBufferStructAttribute()]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class OtherStruct
        : object
    {
        public OtherStruct()
        {
            checked
            {
                this.OnInitialized(null);
            }
        }

#pragma warning disable CS8618
        protected OtherStruct(FlatBufferDeserializationContext context)
        {
            checked
            {
            }
        }

#pragma warning restore CS8618
        public OtherStruct(OtherStruct source)
        {
            checked
            {
                this.Long = FlatSharp.Compiler.Generated.CloneHelpers_f6276915322e4547a2a8caae563efcb7.Clone(source.Long);
                this.OnInitialized(null);
            }
        }

        partial void OnInitialized(FlatBufferDeserializationContext? context);

        protected void OnFlatSharpDeserialized(FlatBufferDeserializationContext? context) => this.OnInitialized(context);

        [FlatBufferItemAttribute(0, WriteThrough = true)]
        public virtual System.Int64 Long { get; set; }

    }
}
#nullable restore
#pragma warning restore 0618
