// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatSharpTests.Oracle
{

using global::System;
using global::FlatBuffers;

public struct BasicTypes : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static BasicTypes GetRootAsBasicTypes(ByteBuffer _bb) { return GetRootAsBasicTypes(_bb, new BasicTypes()); }
  public static BasicTypes GetRootAsBasicTypes(ByteBuffer _bb, BasicTypes obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public BasicTypes __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte Byte { get { int o = __p.__offset(4); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public ushort UShort { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort)0; } }
  public short Short { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)0; } }
  public bool Bool { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public uint UInt { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public int Int { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public sbyte SByte { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetSbyte(o + __p.bb_pos) : (sbyte)0; } }
  public ulong ULong { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public long Long { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public float Float { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public double Double { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  public string String { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStringBytes() { return __p.__vector_as_span(26); }
#else
  public ArraySegment<byte>? GetStringBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetStringArray() { return __p.__vector_as_array<byte>(26); }

  public static Offset<BasicTypes> CreateBasicTypes(FlatBufferBuilder builder,
      byte Byte = 0,
      ushort UShort = 0,
      short Short = 0,
      bool Bool = false,
      uint UInt = 0,
      int Int = 0,
      sbyte SByte = 0,
      ulong ULong = 0,
      long Long = 0,
      float Float = 0.0f,
      double Double = 0.0,
      StringOffset StringOffset = default(StringOffset)) {
    builder.StartObject(12);
    BasicTypes.AddDouble(builder, Double);
    BasicTypes.AddLong(builder, Long);
    BasicTypes.AddULong(builder, ULong);
    BasicTypes.AddString(builder, StringOffset);
    BasicTypes.AddFloat(builder, Float);
    BasicTypes.AddInt(builder, Int);
    BasicTypes.AddUInt(builder, UInt);
    BasicTypes.AddShort(builder, Short);
    BasicTypes.AddUShort(builder, UShort);
    BasicTypes.AddSByte(builder, SByte);
    BasicTypes.AddBool(builder, Bool);
    BasicTypes.AddByte(builder, Byte);
    return BasicTypes.EndBasicTypes(builder);
  }

  public static void StartBasicTypes(FlatBufferBuilder builder) { builder.StartObject(12); }
  public static void AddByte(FlatBufferBuilder builder, byte Byte) { builder.AddByte(0, Byte, 0); }
  public static void AddUShort(FlatBufferBuilder builder, ushort UShort) { builder.AddUshort(1, UShort, 0); }
  public static void AddShort(FlatBufferBuilder builder, short Short) { builder.AddShort(2, Short, 0); }
  public static void AddBool(FlatBufferBuilder builder, bool Bool) { builder.AddBool(3, Bool, false); }
  public static void AddUInt(FlatBufferBuilder builder, uint UInt) { builder.AddUint(4, UInt, 0); }
  public static void AddInt(FlatBufferBuilder builder, int Int) { builder.AddInt(5, Int, 0); }
  public static void AddSByte(FlatBufferBuilder builder, sbyte SByte) { builder.AddSbyte(6, SByte, 0); }
  public static void AddULong(FlatBufferBuilder builder, ulong ULong) { builder.AddUlong(7, ULong, 0); }
  public static void AddLong(FlatBufferBuilder builder, long Long) { builder.AddLong(8, Long, 0); }
  public static void AddFloat(FlatBufferBuilder builder, float Float) { builder.AddFloat(9, Float, 0.0f); }
  public static void AddDouble(FlatBufferBuilder builder, double Double) { builder.AddDouble(10, Double, 0.0); }
  public static void AddString(FlatBufferBuilder builder, StringOffset StringOffset) { builder.AddOffset(11, StringOffset.Value, 0); }
  public static Offset<BasicTypes> EndBasicTypes(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<BasicTypes>(o);
  }
};


}
