// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatSharpTests.Oracle
{

using global::System;
using global::FlatBuffers;

public struct VectorOfUnionTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static VectorOfUnionTable GetRootAsVectorOfUnionTable(ByteBuffer _bb) { return GetRootAsVectorOfUnionTable(_bb, new VectorOfUnionTable()); }
  public static VectorOfUnionTable GetRootAsVectorOfUnionTable(ByteBuffer _bb, VectorOfUnionTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public VectorOfUnionTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Union ValueType(int j) { int o = __p.__offset(4); return o != 0 ? (Union)__p.bb.Get(__p.__vector(o) + j * 1) : (Union)0; }
  public int ValueTypeLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetValueTypeBytes() { return __p.__vector_as_span(4); }
#else
  public ArraySegment<byte>? GetValueTypeBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public Union[] GetValueTypeArray() { return __p.__vector_as_array<Union>(4); }
  public TTable? Value<TTable>(int j) where TTable : struct, IFlatbufferObject { int o = __p.__offset(6); return o != 0 ? (TTable?)__p.__union<TTable>(__p.__vector(o) + j * 4) : null; }
  public int ValueLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<VectorOfUnionTable> CreateVectorOfUnionTable(FlatBufferBuilder builder,
      VectorOffset Value_typeOffset = default(VectorOffset),
      VectorOffset ValueOffset = default(VectorOffset)) {
    builder.StartObject(2);
    VectorOfUnionTable.AddValue(builder, ValueOffset);
    VectorOfUnionTable.AddValueType(builder, Value_typeOffset);
    return VectorOfUnionTable.EndVectorOfUnionTable(builder);
  }

  public static void StartVectorOfUnionTable(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddValueType(FlatBufferBuilder builder, VectorOffset ValueTypeOffset) { builder.AddOffset(0, ValueTypeOffset.Value, 0); }
  public static VectorOffset CreateValueTypeVector(FlatBufferBuilder builder, Union[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte((byte)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateValueTypeVectorBlock(FlatBufferBuilder builder, Union[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static void StartValueTypeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddValue(FlatBufferBuilder builder, VectorOffset ValueOffset) { builder.AddOffset(1, ValueOffset.Value, 0); }
  public static VectorOffset CreateValueVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateValueVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartValueVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<VectorOfUnionTable> EndVectorOfUnionTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<VectorOfUnionTable>(o);
  }
};


}
