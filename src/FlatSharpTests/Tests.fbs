/*
 * Copyright 2018 James Courtney
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

namespace FlatSharpTests.Oracle;

table BasicTypes {
	Byte:ubyte;
	UShort:uint16;
	Short:int16;
	Bool:bool;
	UInt:uint32;
	Int:int32;
	SByte:byte;
	ULong:uint64;
	Long:int64;

	Float:float32;
	Double:float64;

	String:string;
}

table LinkedListNode {
    Value:string;
	Next:LinkedListNode;
}

table Vectors {
   IntVector:[int32];
   LongVector:[int64];
   ByteVector1:[ubyte];
   ByteVector2:[ubyte];
}

table LocationHolder{
	SingleLocation:Location;
	Fake:string;
	LocationVector:[Location];
}

struct Location {
	X:float32;
	Y:float32;
	Z:float32;
}

struct AlignmentTestInner {
	a:ubyte;
	b:int32;
	c:byte;
}

struct AlignmentTestOuter {
	a:ubyte;
	b:uint16;

	c:ubyte;
	d:uint32;

	e:ubyte;
	f:uint64;

	g:AlignmentTestInner;
}

struct FiveByteStruct 
{
	Int:int32;
	Byte:ubyte;
}

table FiveByteStructTable
{
	Vector:[FiveByteStruct];
}

table AlignmentTestOuterHoder {
	Value:AlignmentTestOuter;
}

union Union { BasicTypes, Location, stringValue:string }

table UnionTable { 
	Value:Union;
}

table UnionVectorTable {
    Value:[Union];
}

table VectorOfUnionTable {
	Value:[Union];
}

table NestedStructs {
	Outer:OuterStruct;
}

struct InnerStruct {
	A:int;
}

struct OuterStruct {
	Inner:InnerStruct;
	A:int;
}

table StructVectorsTable {
   Vec:StructVectors;
}

struct StructVectors {
   AlignmentVec:[FiveByteStruct:3];
   HashVec:[ulong:4];
}

table SortedVectorTest {
	Int32:[SortedVectorInt32Table];
	String:[SortedVectorStringTable];
	Double:[SortedVectorDoubleTable];
}

table SortedVectorInt32Table {
	Value:int32 = 5 (key);
}

table SortedVectorDoubleTable {
	Value:double (key);
}

table SortedVectorStringTable {
	Value:string (key);
}

enum MyEnum : byte {
  A,
  B
}