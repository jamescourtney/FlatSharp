/*
 * Copyright 2022 James Courtney
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

<#
    int numGenericInterfaces = 100;
#>

namespace FlatSharp;

/// <summary>
/// Describes a Flat Buffer union with a discriminator.
/// </summary>
public interface IFlatBufferUnion
{
    /// <summary>
    /// Gets the discriminator from the union.
    /// </summary>
    byte Discriminator { get; }
}

<#
    for (int i = 1; i <= numGenericInterfaces; ++i)
    {
#>

/// <summary>
/// A Flat Buffer union visitor capable of visiting <#= i #> items.
/// </summary>
public interface IFlatBufferUnionVisitor<TReturn, <#= string.Join(", ", Enumerable.Range(1, i).Select(x => $"T{x}")) #>>
{
<#
        for (int j = 1; j <= i; ++j)
        {
#>
    
    TReturn Visit(T<#= j #> item);

<#
        }
#>
}


/// <summary>
/// A FlatBuffer union visitor describing a union of <#= i #> items.
/// </summary>
public interface IFlatBufferUnion<<#= string.Join(", ", Enumerable.Range(1, i).Select(x => $"T{x}")) #>> : IFlatBufferUnion
{
<#
        for (int j = 1; j <= i; ++j)
        {
#>
    
            T<#= j #> Item<#= j #>  { get; }

<#
        }
#>

}

<#
    }
#>
