/*
 * Copyright 2020 James Courtney
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

<#
    (string casedName, string typeName)[] types = 
    {
        ("Bool", "bool"),
        ("UInt8", "byte"),
        ("Int8", "sbyte"),
        ("UInt16", "ushort"),
        ("Int16", "short"),
        ("Int32", "int"),
        ("UInt32", "uint"),
        ("Int64", "long"),
        ("UInt64", "ulong"),
        ("Float32", "float"),
        ("Float64", "double"),
    };
#>

namespace FlatSharp.Internal;

<#
    foreach (var pair in types)
    {
        var casedName = pair.casedName;
        var typeName = pair.typeName;
        var className = $"{casedName}SpanComparer";
#>

public struct <#=className#> : ISpanComparer
{
    private readonly <#=typeName#> defaultValue;

    public <#=className#>(<#=typeName#> defaultValue)
    {
        this.defaultValue = defaultValue;
    }

    public int Compare<TBuffer>(bool leftExists, TBuffer left, bool rightExists, TBuffer right)
        where TBuffer : IFlatBufferReaderWriter<TBuffer>
#if NET9_0_OR_GREATER
        , allows ref struct
#endif
    {
        <#=typeName#> leftValue = leftExists ? left.Read<#=casedName#>(0) : this.defaultValue;
        <#=typeName#> rightValue = rightExists ? right.Read<#=casedName#>(0) : this.defaultValue;

        return leftValue.CompareTo(rightValue);
    }
}

[ExcludeFromCodeCoverage] // Not currently used.
public struct Nullable<#=className#> : ISpanComparer
{
    public Nullable<#=className#>(<#=typeName#>? notUsed)
    {
    }

    public int Compare<TBuffer>(bool leftExists, TBuffer left, bool rightExists, TBuffer right)
        where TBuffer : IFlatBufferReaderWriter<TBuffer>
#if NET9_0_OR_GREATER
        , allows ref struct
#endif
    {
        if (!leftExists || !rightExists)
        {
            return leftExists.CompareTo(rightExists);
        }

        return left.Read<#=casedName#>(0).CompareTo(right.Read<#=casedName#>(0));
    }
}

<# } #>