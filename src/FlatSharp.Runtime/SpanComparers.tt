/*
 * Copyright 2020 James Courtney
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

<#
	(string casedName, string typeName)[] types = 
	{
		("Bool", "bool"),
		("Byte", "byte"),
		("SByte", "sbyte"),
		("UShort", "ushort"),
		("Short", "short"),
		("Int", "int"),
		("UInt", "uint"),
		("Long", "long"),
		("ULong", "ulong"),
		("Float", "float"),
		("Double", "double"),
	};
#>

namespace FlatSharp
{
	using System;
	using System.ComponentModel;

	<#
		foreach (var pair in types)
		{
			var casedName = pair.casedName;
			var typeName = pair.typeName;
			var className = $"{casedName}SpanComparer";
	#>
	
    [EditorBrowsable(EditorBrowsableState.Never)]
    public struct <#=className#> : ISpanComparer
    {
		private readonly <#=typeName#> defaultValue;

		public <#=className#>(<#=typeName#> defaultValue)
		{
			this.defaultValue = defaultValue;
		}

        public int Compare(bool leftExists, ReadOnlySpan<byte> left, bool rightExists, ReadOnlySpan<byte> right)
        {
			<#=typeName#> leftValue = leftExists ? ScalarSpanReader.Read<#=casedName#>(left) : this.defaultValue;
			<#=typeName#> rightValue = rightExists ? ScalarSpanReader.Read<#=casedName#>(right) : this.defaultValue;

			return leftValue.CompareTo(rightValue);
        }
    }
	
    [EditorBrowsable(EditorBrowsableState.Never)]
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage] // Not currently used.
	public struct Nullable<#=className#> : ISpanComparer
    {
		public Nullable<#=className#>(<#=typeName#>? notUsed)
		{
		}
		
        public int Compare(bool leftExists, ReadOnlySpan<byte> left, bool rightExists, ReadOnlySpan<byte> right)
        {
			if (!leftExists || !rightExists)
			{
				return leftExists.CompareTo(rightExists);
			}

			return ScalarSpanReader.Read<#=casedName#>(left).CompareTo(ScalarSpanReader.Read<#=casedName#>(right));
        }
    }

	<# } #>
}