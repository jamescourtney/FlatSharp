
attribute "fs_serializer";
attribute "fs_unsafeStructVector";
attribute "fs_valueStruct";
attribute "fs_writeThrough";
attribute "fs_vector";
attribute "fs_sortedVector";

namespace FlatSharpEndToEndTests.Vectors.Sorted;

table RootTable (fs_serializer)
{
    list_vector_of_bool : [ BoolKey ] (fs_sortedVector);

    list_vector_of_byte : [ ByteKey ] (fs_sortedVector);
    list_vector_of_sbyte : [ SByteKey ] (fs_sortedVector);

    list_vector_of_short : [ ShortKey ] (fs_sortedVector);
    list_vector_of_ushort : [ UShortKey ]  (fs_sortedVector);

    list_vector_of_int : [ IntKey ] (fs_sortedVector);
    list_vector_of_uint : [ UIntKey ] (fs_sortedVector);

    list_vector_of_long : [ LongKey ] (fs_sortedVector);
    list_vector_of_ulong : [ ULongKey ] (fs_sortedVector);

    list_vector_of_float : [ FloatKey ] (fs_sortedVector);
    list_vector_of_double : [ DoubleKey ] (fs_sortedVector);

    list_vector_of_string : [ StringKey ] (fs_sortedVector);
}

table RootTableReadOnly (fs_serializer)
{
    list_vector_of_bool : [ BoolKey ] (fs_sortedVector, fs_vector:"IReadOnlyList");

    list_vector_of_byte : [ ByteKey ] (fs_sortedVector, fs_vector:"IReadOnlyList");
    list_vector_of_sbyte : [ SByteKey ] (fs_sortedVector, fs_vector:"IReadOnlyList");

    list_vector_of_short : [ ShortKey ] (fs_sortedVector, fs_vector:"IReadOnlyList");
    list_vector_of_ushort : [ UShortKey ]  (fs_sortedVector, fs_vector:"IReadOnlyList");

    list_vector_of_int : [ IntKey ] (fs_sortedVector, fs_vector:"IReadOnlyList");
    list_vector_of_uint : [ UIntKey ] (fs_sortedVector, fs_vector:"IReadOnlyList");

    list_vector_of_long : [ LongKey ] (fs_sortedVector, fs_vector:"IReadOnlyList");
    list_vector_of_ulong : [ ULongKey ] (fs_sortedVector, fs_vector:"IReadOnlyList");

    list_vector_of_float : [ FloatKey ] (fs_sortedVector, fs_vector:"IReadOnlyList");
    list_vector_of_double : [ DoubleKey ] (fs_sortedVector, fs_vector:"IReadOnlyList");

    list_vector_of_string : [ StringKey ] (fs_sortedVector, fs_vector:"IReadOnlyList");
}

table RootTableIndexed (fs_serializer)
{
    indexed_vector_of_bool : [ BoolKey ] (fs_vector:"IIndexedVector");

    indexed_vector_of_byte : [ ByteKey ] (fs_vector:"IIndexedVector");
    indexed_vector_of_sbyte : [ SByteKey ] (fs_vector:"IIndexedVector");

    indexed_vector_of_short : [ ShortKey ] (fs_vector:"IIndexedVector");
    indexed_vector_of_ushort : [ UShortKey ]  (fs_vector:"IIndexedVector");

    indexed_vector_of_int : [ IntKey ] (fs_vector:"IIndexedVector");
    indexed_vector_of_uint : [ UIntKey ] (fs_vector:"IIndexedVector");

    indexed_vector_of_long : [ LongKey ] (fs_vector:"IIndexedVector");
    indexed_vector_of_ulong : [ ULongKey ] (fs_vector:"IIndexedVector");

    indexed_vector_of_float : [ FloatKey ] (fs_vector:"IIndexedVector");
    indexed_vector_of_double : [ DoubleKey ] (fs_vector:"IIndexedVector");

    indexed_vector_of_string : [ StringKey ] (fs_vector:"IIndexedVector");
}

table BoolKey { Key : bool (key); }
table ByteKey { Key : ubyte (key); }
table SByteKey { Key : byte (key); }
table ShortKey { Key : short (key); }
table UShortKey { Key : ushort (key); }
table IntKey { Key : int (key); }
table UIntKey { Key : uint (key); }
table LongKey { Key : long (key); }
table ULongKey { Key : ulong (key); }
table FloatKey { Key : float (key); }
table DoubleKey { Key : double (key); }
table StringKey { Key : string (key); }