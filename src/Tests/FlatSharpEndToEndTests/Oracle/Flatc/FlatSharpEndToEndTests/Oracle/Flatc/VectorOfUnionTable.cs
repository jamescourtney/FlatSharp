// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatSharpEndToEndTests.Oracle.Flatc
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct VectorOfUnionTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_22_10_26(); }
  public static VectorOfUnionTable GetRootAsVectorOfUnionTable(ByteBuffer _bb) { return GetRootAsVectorOfUnionTable(_bb, new VectorOfUnionTable()); }
  public static VectorOfUnionTable GetRootAsVectorOfUnionTable(ByteBuffer _bb, VectorOfUnionTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public VectorOfUnionTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public FlatSharpEndToEndTests.Oracle.Flatc.Union ValueType(int j) { int o = __p.__offset(4); return o != 0 ? (FlatSharpEndToEndTests.Oracle.Flatc.Union)__p.bb.Get(__p.__vector(o) + j * 1) : (FlatSharpEndToEndTests.Oracle.Flatc.Union)0; }
  public int ValueTypeLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<FlatSharpEndToEndTests.Oracle.Flatc.Union> GetValueTypeBytes() { return __p.__vector_as_span<FlatSharpEndToEndTests.Oracle.Flatc.Union>(4, 1); }
#else
  public ArraySegment<byte>? GetValueTypeBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public FlatSharpEndToEndTests.Oracle.Flatc.Union[] GetValueTypeArray() { int o = __p.__offset(4); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); FlatSharpEndToEndTests.Oracle.Flatc.Union[] a = new FlatSharpEndToEndTests.Oracle.Flatc.Union[l]; for (int i = 0; i < l; i++) { a[i] = (FlatSharpEndToEndTests.Oracle.Flatc.Union)__p.bb.Get(p + i * 1); } return a; }
  public TTable? Value<TTable>(int j) where TTable : struct, IFlatbufferObject { int o = __p.__offset(6); return o != 0 ? (TTable?)__p.__union<TTable>(__p.__vector(o) + j * 4) : null; }
  public string ValueAsString(int j) { int o = __p.__offset(6); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ValueLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<FlatSharpEndToEndTests.Oracle.Flatc.VectorOfUnionTable> CreateVectorOfUnionTable(FlatBufferBuilder builder,
      VectorOffset Value_typeOffset = default(VectorOffset),
      VectorOffset ValueOffset = default(VectorOffset)) {
    builder.StartTable(2);
    VectorOfUnionTable.AddValue(builder, ValueOffset);
    VectorOfUnionTable.AddValueType(builder, Value_typeOffset);
    return VectorOfUnionTable.EndVectorOfUnionTable(builder);
  }

  public static void StartVectorOfUnionTable(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddValueType(FlatBufferBuilder builder, VectorOffset ValueTypeOffset) { builder.AddOffset(0, ValueTypeOffset.Value, 0); }
  public static VectorOffset CreateValueTypeVector(FlatBufferBuilder builder, FlatSharpEndToEndTests.Oracle.Flatc.Union[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte((byte)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateValueTypeVectorBlock(FlatBufferBuilder builder, FlatSharpEndToEndTests.Oracle.Flatc.Union[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateValueTypeVectorBlock(FlatBufferBuilder builder, ArraySegment<FlatSharpEndToEndTests.Oracle.Flatc.Union> data) { builder.StartVector(1, data.Count, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateValueTypeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<FlatSharpEndToEndTests.Oracle.Flatc.Union>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartValueTypeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddValue(FlatBufferBuilder builder, VectorOffset ValueOffset) { builder.AddOffset(1, ValueOffset.Value, 0); }
  public static VectorOffset CreateValueVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateValueVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateValueVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateValueVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartValueVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<FlatSharpEndToEndTests.Oracle.Flatc.VectorOfUnionTable> EndVectorOfUnionTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatSharpEndToEndTests.Oracle.Flatc.VectorOfUnionTable>(o);
  }
  public VectorOfUnionTableT UnPack() {
    var _o = new VectorOfUnionTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(VectorOfUnionTableT _o) {
    _o.Value = new List<FlatSharpEndToEndTests.Oracle.Flatc.UnionUnion>();
    for (var _j = 0; _j < this.ValueLength; ++_j) {
      var _o_Value = new FlatSharpEndToEndTests.Oracle.Flatc.UnionUnion();
      _o_Value.Type = this.ValueType(_j);
      switch (this.ValueType(_j)) {
        default: break;
        case FlatSharpEndToEndTests.Oracle.Flatc.Union.BasicTypes:
          _o_Value.Value = this.Value<FlatSharpEndToEndTests.Oracle.Flatc.BasicTypes>(_j).HasValue ? this.Value<FlatSharpEndToEndTests.Oracle.Flatc.BasicTypes>(_j).Value.UnPack() : null;
          break;
        case FlatSharpEndToEndTests.Oracle.Flatc.Union.Location:
          _o_Value.Value = this.Value<FlatSharpEndToEndTests.Oracle.Flatc.Location>(_j).HasValue ? this.Value<FlatSharpEndToEndTests.Oracle.Flatc.Location>(_j).Value.UnPack() : null;
          break;
        case FlatSharpEndToEndTests.Oracle.Flatc.Union.stringValue:
          _o_Value.Value = this.ValueAsString(_j);
          break;
      }
      _o.Value.Add(_o_Value);
    }
  }
  public static Offset<FlatSharpEndToEndTests.Oracle.Flatc.VectorOfUnionTable> Pack(FlatBufferBuilder builder, VectorOfUnionTableT _o) {
    if (_o == null) return default(Offset<FlatSharpEndToEndTests.Oracle.Flatc.VectorOfUnionTable>);
    var _Value_type = default(VectorOffset);
    if (_o.Value != null) {
      var __Value_type = new FlatSharpEndToEndTests.Oracle.Flatc.Union[_o.Value.Count];
      for (var _j = 0; _j < __Value_type.Length; ++_j) { __Value_type[_j] = _o.Value[_j].Type; }
      _Value_type = CreateValueTypeVector(builder, __Value_type);
    }
    var _Value = default(VectorOffset);
    if (_o.Value != null) {
      var __Value = new int[_o.Value.Count];
      for (var _j = 0; _j < __Value.Length; ++_j) { __Value[_j] = FlatSharpEndToEndTests.Oracle.Flatc.UnionUnion.Pack(builder,  _o.Value[_j]); }
      _Value = CreateValueVector(builder, __Value);
    }
    return CreateVectorOfUnionTable(
      builder,
      _Value_type,
      _Value);
  }
}

public class VectorOfUnionTableT
{
  public List<FlatSharpEndToEndTests.Oracle.Flatc.UnionUnion> Value { get; set; }

  public VectorOfUnionTableT() {
    this.Value = null;
  }
}


}
