// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatSharpEndToEndTests.Oracle.Flatc
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SortedVectorDoubleTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_22_10_26(); }
  public static SortedVectorDoubleTable GetRootAsSortedVectorDoubleTable(ByteBuffer _bb) { return GetRootAsSortedVectorDoubleTable(_bb, new SortedVectorDoubleTable()); }
  public static SortedVectorDoubleTable GetRootAsSortedVectorDoubleTable(ByteBuffer _bb, SortedVectorDoubleTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SortedVectorDoubleTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public double Value { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }

  public static Offset<FlatSharpEndToEndTests.Oracle.Flatc.SortedVectorDoubleTable> CreateSortedVectorDoubleTable(FlatBufferBuilder builder,
      double Value = 0.0) {
    builder.StartTable(1);
    SortedVectorDoubleTable.AddValue(builder, Value);
    return SortedVectorDoubleTable.EndSortedVectorDoubleTable(builder);
  }

  public static void StartSortedVectorDoubleTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddValue(FlatBufferBuilder builder, double Value) { builder.AddDouble(0, Value, 0.0); }
  public static Offset<FlatSharpEndToEndTests.Oracle.Flatc.SortedVectorDoubleTable> EndSortedVectorDoubleTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatSharpEndToEndTests.Oracle.Flatc.SortedVectorDoubleTable>(o);
  }

  public static VectorOffset CreateSortedVectorOfSortedVectorDoubleTable(FlatBufferBuilder builder, Offset<SortedVectorDoubleTable>[] offsets) {
    Array.Sort(offsets,
      (Offset<SortedVectorDoubleTable> o1, Offset<SortedVectorDoubleTable> o2) =>
        new SortedVectorDoubleTable().__assign(builder.DataBuffer.Length - o1.Value, builder.DataBuffer).Value.CompareTo(new SortedVectorDoubleTable().__assign(builder.DataBuffer.Length - o2.Value, builder.DataBuffer).Value));
    return builder.CreateVectorOfTables(offsets);
  }

  public static SortedVectorDoubleTable? __lookup_by_key(int vectorLocation, double key, ByteBuffer bb) {
    SortedVectorDoubleTable obj_ = new SortedVectorDoubleTable();
    int span = bb.GetInt(vectorLocation - 4);
    int start = 0;
    while (span != 0) {
      int middle = span / 2;
      int tableOffset = Table.__indirect(vectorLocation + 4 * (start + middle), bb);
      obj_.__assign(tableOffset, bb);
      int comp = obj_.Value.CompareTo(key);
      if (comp > 0) {
        span = middle;
      } else if (comp < 0) {
        middle++;
        start += middle;
        span -= middle;
      } else {
        return obj_;
      }
    }
    return null;
  }
  public SortedVectorDoubleTableT UnPack() {
    var _o = new SortedVectorDoubleTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SortedVectorDoubleTableT _o) {
    _o.Value = this.Value;
  }
  public static Offset<FlatSharpEndToEndTests.Oracle.Flatc.SortedVectorDoubleTable> Pack(FlatBufferBuilder builder, SortedVectorDoubleTableT _o) {
    if (_o == null) return default(Offset<FlatSharpEndToEndTests.Oracle.Flatc.SortedVectorDoubleTable>);
    return CreateSortedVectorDoubleTable(
      builder,
      _o.Value);
  }
}

public class SortedVectorDoubleTableT
{
  public double Value { get; set; }

  public SortedVectorDoubleTableT() {
    this.Value = 0.0;
  }
}


}
