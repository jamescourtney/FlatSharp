// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatSharpEndToEndTests.Oracle.Flatc
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SortedVectorTest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_22_10_26(); }
  public static SortedVectorTest GetRootAsSortedVectorTest(ByteBuffer _bb) { return GetRootAsSortedVectorTest(_bb, new SortedVectorTest()); }
  public static SortedVectorTest GetRootAsSortedVectorTest(ByteBuffer _bb, SortedVectorTest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SortedVectorTest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public FlatSharpEndToEndTests.Oracle.Flatc.SortedVectorInt32Table? Int32(int j) { int o = __p.__offset(4); return o != 0 ? (FlatSharpEndToEndTests.Oracle.Flatc.SortedVectorInt32Table?)(new FlatSharpEndToEndTests.Oracle.Flatc.SortedVectorInt32Table()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int Int32Length { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public FlatSharpEndToEndTests.Oracle.Flatc.SortedVectorInt32Table? Int32ByKey(int key) { int o = __p.__offset(4); return o != 0 ? FlatSharpEndToEndTests.Oracle.Flatc.SortedVectorInt32Table.__lookup_by_key(__p.__vector(o), key, __p.bb) : null; }
  public FlatSharpEndToEndTests.Oracle.Flatc.SortedVectorStringTable? String(int j) { int o = __p.__offset(6); return o != 0 ? (FlatSharpEndToEndTests.Oracle.Flatc.SortedVectorStringTable?)(new FlatSharpEndToEndTests.Oracle.Flatc.SortedVectorStringTable()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int StringLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public FlatSharpEndToEndTests.Oracle.Flatc.SortedVectorStringTable? StringByKey(string key) { int o = __p.__offset(6); return o != 0 ? FlatSharpEndToEndTests.Oracle.Flatc.SortedVectorStringTable.__lookup_by_key(__p.__vector(o), key, __p.bb) : null; }
  public FlatSharpEndToEndTests.Oracle.Flatc.SortedVectorDoubleTable? Double(int j) { int o = __p.__offset(8); return o != 0 ? (FlatSharpEndToEndTests.Oracle.Flatc.SortedVectorDoubleTable?)(new FlatSharpEndToEndTests.Oracle.Flatc.SortedVectorDoubleTable()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DoubleLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public FlatSharpEndToEndTests.Oracle.Flatc.SortedVectorDoubleTable? DoubleByKey(double key) { int o = __p.__offset(8); return o != 0 ? FlatSharpEndToEndTests.Oracle.Flatc.SortedVectorDoubleTable.__lookup_by_key(__p.__vector(o), key, __p.bb) : null; }

  public static Offset<FlatSharpEndToEndTests.Oracle.Flatc.SortedVectorTest> CreateSortedVectorTest(FlatBufferBuilder builder,
      VectorOffset Int32Offset = default(VectorOffset),
      VectorOffset StringOffset = default(VectorOffset),
      VectorOffset DoubleOffset = default(VectorOffset)) {
    builder.StartTable(3);
    SortedVectorTest.AddDouble(builder, DoubleOffset);
    SortedVectorTest.AddString(builder, StringOffset);
    SortedVectorTest.AddInt32(builder, Int32Offset);
    return SortedVectorTest.EndSortedVectorTest(builder);
  }

  public static void StartSortedVectorTest(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddInt32(FlatBufferBuilder builder, VectorOffset Int32Offset) { builder.AddOffset(0, Int32Offset.Value, 0); }
  public static VectorOffset CreateInt32Vector(FlatBufferBuilder builder, Offset<FlatSharpEndToEndTests.Oracle.Flatc.SortedVectorInt32Table>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateInt32VectorBlock(FlatBufferBuilder builder, Offset<FlatSharpEndToEndTests.Oracle.Flatc.SortedVectorInt32Table>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateInt32VectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<FlatSharpEndToEndTests.Oracle.Flatc.SortedVectorInt32Table>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateInt32VectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<FlatSharpEndToEndTests.Oracle.Flatc.SortedVectorInt32Table>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartInt32Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddString(FlatBufferBuilder builder, VectorOffset StringOffset) { builder.AddOffset(1, StringOffset.Value, 0); }
  public static VectorOffset CreateStringVector(FlatBufferBuilder builder, Offset<FlatSharpEndToEndTests.Oracle.Flatc.SortedVectorStringTable>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateStringVectorBlock(FlatBufferBuilder builder, Offset<FlatSharpEndToEndTests.Oracle.Flatc.SortedVectorStringTable>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateStringVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<FlatSharpEndToEndTests.Oracle.Flatc.SortedVectorStringTable>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateStringVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<FlatSharpEndToEndTests.Oracle.Flatc.SortedVectorStringTable>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartStringVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDouble(FlatBufferBuilder builder, VectorOffset DoubleOffset) { builder.AddOffset(2, DoubleOffset.Value, 0); }
  public static VectorOffset CreateDoubleVector(FlatBufferBuilder builder, Offset<FlatSharpEndToEndTests.Oracle.Flatc.SortedVectorDoubleTable>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDoubleVectorBlock(FlatBufferBuilder builder, Offset<FlatSharpEndToEndTests.Oracle.Flatc.SortedVectorDoubleTable>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDoubleVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<FlatSharpEndToEndTests.Oracle.Flatc.SortedVectorDoubleTable>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDoubleVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<FlatSharpEndToEndTests.Oracle.Flatc.SortedVectorDoubleTable>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDoubleVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<FlatSharpEndToEndTests.Oracle.Flatc.SortedVectorTest> EndSortedVectorTest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatSharpEndToEndTests.Oracle.Flatc.SortedVectorTest>(o);
  }
  public SortedVectorTestT UnPack() {
    var _o = new SortedVectorTestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SortedVectorTestT _o) {
    _o.Int32 = new List<FlatSharpEndToEndTests.Oracle.Flatc.SortedVectorInt32TableT>();
    for (var _j = 0; _j < this.Int32Length; ++_j) {_o.Int32.Add(this.Int32(_j).HasValue ? this.Int32(_j).Value.UnPack() : null);}
    _o.String = new List<FlatSharpEndToEndTests.Oracle.Flatc.SortedVectorStringTableT>();
    for (var _j = 0; _j < this.StringLength; ++_j) {_o.String.Add(this.String(_j).HasValue ? this.String(_j).Value.UnPack() : null);}
    _o.Double = new List<FlatSharpEndToEndTests.Oracle.Flatc.SortedVectorDoubleTableT>();
    for (var _j = 0; _j < this.DoubleLength; ++_j) {_o.Double.Add(this.Double(_j).HasValue ? this.Double(_j).Value.UnPack() : null);}
  }
  public static Offset<FlatSharpEndToEndTests.Oracle.Flatc.SortedVectorTest> Pack(FlatBufferBuilder builder, SortedVectorTestT _o) {
    if (_o == null) return default(Offset<FlatSharpEndToEndTests.Oracle.Flatc.SortedVectorTest>);
    var _Int32 = default(VectorOffset);
    if (_o.Int32 != null) {
      var __Int32 = new Offset<FlatSharpEndToEndTests.Oracle.Flatc.SortedVectorInt32Table>[_o.Int32.Count];
      for (var _j = 0; _j < __Int32.Length; ++_j) { __Int32[_j] = FlatSharpEndToEndTests.Oracle.Flatc.SortedVectorInt32Table.Pack(builder, _o.Int32[_j]); }
      _Int32 = CreateInt32Vector(builder, __Int32);
    }
    var _String = default(VectorOffset);
    if (_o.String != null) {
      var __String = new Offset<FlatSharpEndToEndTests.Oracle.Flatc.SortedVectorStringTable>[_o.String.Count];
      for (var _j = 0; _j < __String.Length; ++_j) { __String[_j] = FlatSharpEndToEndTests.Oracle.Flatc.SortedVectorStringTable.Pack(builder, _o.String[_j]); }
      _String = CreateStringVector(builder, __String);
    }
    var _Double = default(VectorOffset);
    if (_o.Double != null) {
      var __Double = new Offset<FlatSharpEndToEndTests.Oracle.Flatc.SortedVectorDoubleTable>[_o.Double.Count];
      for (var _j = 0; _j < __Double.Length; ++_j) { __Double[_j] = FlatSharpEndToEndTests.Oracle.Flatc.SortedVectorDoubleTable.Pack(builder, _o.Double[_j]); }
      _Double = CreateDoubleVector(builder, __Double);
    }
    return CreateSortedVectorTest(
      builder,
      _Int32,
      _String,
      _Double);
  }
}

public class SortedVectorTestT
{
  public List<FlatSharpEndToEndTests.Oracle.Flatc.SortedVectorInt32TableT> Int32 { get; set; }
  public List<FlatSharpEndToEndTests.Oracle.Flatc.SortedVectorStringTableT> String { get; set; }
  public List<FlatSharpEndToEndTests.Oracle.Flatc.SortedVectorDoubleTableT> Double { get; set; }

  public SortedVectorTestT() {
    this.Int32 = null;
    this.String = null;
    this.Double = null;
  }
}


}
