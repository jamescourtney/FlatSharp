/*
 * Copyright 2018 James Courtney
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

attribute "fs_serializer";
attribute "fs_sortedVector";

namespace FlatSharpEndToEndTests.Oracle.FS;

table BasicTypes (fs_serializer) {
    Byte:ubyte;
    UShort:uint16;
    Short:int16;
    Bool:bool;
    UInt:uint32;
    Int:int32;
    SByte:byte;
    ULong:uint64;
    Long:int64;

    Float:float32;
    Double:float64;

    String:string;
}

table LinkedListNode (fs_serializer) {
    Value:string;
    Next:LinkedListNode;
}

table Vectors (fs_serializer){
   IntVector:[int32];
   LongVector:[int64];
   ByteVector1:[ubyte];
   ByteVector2:[ubyte];
   ByteVector3 : [ubyte] (required);
}

table LocationHolder (fs_serializer){
    SingleLocation:Location;
    Fake:string;
    LocationVector:[Location];
}

struct Location {
    X:float32;
    Y:float32;
    Z:float32;
}

struct AlignmentTestInner {
    a:ubyte;
    b:int32;
    c:byte;
}

struct AlignmentTestOuter {
    a:ubyte;
    b:uint16;

    c:ubyte;
    d:uint32;

    e:ubyte;
    f:uint64;

    g:AlignmentTestInner;
}

struct FiveByteStruct 
{
    Int:int32;
    Byte:ubyte;
}

table FiveByteStructTable (fs_serializer)
{
    Vector:[FiveByteStruct];
}

table AlignmentTestOuterHoder (fs_serializer) {
    Value:AlignmentTestOuter;
}

union Union { BasicTypes, Location, stringValue:string }

table UnionTable (fs_serializer) { 
    Value:Union;
}

table UnionVectorTable (fs_serializer) {
    Value:[Union];
}

table VectorOfUnionTable (fs_serializer){
    Value:[Union];
}

table NestedStructs (fs_serializer){
    Outer:OuterStruct;
}

struct InnerStruct {
    A:int;
}

struct OuterStruct {
    Inner:InnerStruct;
    A:int;
}

table StructVectorsTable (fs_serializer){
   Vec:StructVectors;
}

struct StructVectors {
   AlignmentVec:[FiveByteStruct:3];
   HashVec:[ulong:4];
}

table SortedVectorTest (fs_serializer){
    Int32:[SortedVectorInt32Table] (fs_sortedVector);
    String:[SortedVectorStringTable] (fs_sortedVector);
    Double:[SortedVectorDoubleTable] (fs_sortedVector);
}

table SortedVectorInt32Table (fs_serializer){
    Value:int32 = 5 (key);
}

table SortedVectorInt32Table_NoKey (fs_serializer){
    Value:int32;
}

table SortedVectorDoubleTable (fs_serializer){
    Value:double (key);
}

table SortedVectorStringTable (fs_serializer){
    Value:string (key);
}

enum MyEnum : byte {
  A,
  B
}