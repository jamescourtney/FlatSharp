
attribute "fs_serializer";
attribute "fs_unsafeStructVector";
attribute "fs_valueStruct";
attribute "fs_writeThrough";
attribute "fs_vector";
attribute "fs_sharedString";

namespace FlatSharpEndToEndTests.CopyConstructors;

union Union { OuterTable, InnerTable, OuterStruct, InnerStruct } // Optionally add more tables.

table OuterTable (fs_serializer) {
  A:string (id: 0);

  B:byte   (id: 1);
  C:ubyte  (id: 2);
  D:int16  (id: 3); 
  E:uint16 (id: 4);
  F:int32  (id: 5);
  G:uint32 (id: 6);
  H:int64  (id: 7);
  I:uint64 (id: 8);
  
  IntVector_List:[int] (fs_vector:"IList", id: 9);
  IntVector_RoList:[int] (fs_vector:"IReadOnlyList", id: 10);
  IntVector_Array:[int] (fs_vector:"IList", id: 11);
  
  TableVector_List:[InnerTable] (fs_vector:"IList", id: 12);
  TableVector_RoList:[InnerTable] (fs_vector:"IReadOnlyList", id: 13);
  TableVector_Indexed:[InnerTable] (fs_vector:"IIndexedVector", id: 14);
  TableVector_Array:[InnerTable] (fs_vector:"IList", id: 15);

  ByteVector:[ubyte] (fs_vector:"Memory", id: 16);
  ByteVector_RO:[ubyte] (fs_vector:"ReadOnlyMemory", id: 17);
  UnionVal : Union (id: 19);

  VectorOfUnion : [Union] (id: 21);
  VectorOfUnion_RoList : [Union] (id: 23, fs_vector:"IReadOnlyList");
  VectorOfUnion_Array : [Union] (id: 25, fs_vector:"IList");
}

struct InnerStruct {
    LongValue:int64;
}

struct OuterStruct {
    Value:int;
    InnerStructVal:InnerStruct;
}

table InnerTable {
  Name:string (key);
  OuterStructVal:OuterStruct;
}
