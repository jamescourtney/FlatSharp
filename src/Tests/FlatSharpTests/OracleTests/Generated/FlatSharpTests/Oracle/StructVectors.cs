// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatSharpTests.Oracle
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct StructVectors : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public StructVectors __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public FlatSharpTests.Oracle.FiveByteStruct AlignmentVec(int j) { return (new FlatSharpTests.Oracle.FiveByteStruct()).__assign(__p.bb_pos + 0 + j * 8, __p.bb); }
  public ulong HashVec(int j) { return __p.bb.GetUlong(__p.bb_pos + 24 + j * 8); }

  public static Offset<FlatSharpTests.Oracle.StructVectors> CreateStructVectors(FlatBufferBuilder builder, int[] AlignmentVec_Int, byte[] AlignmentVec_Byte, ulong[] HashVec) {
    builder.Prep(8, 56);
    for (int _idx0 = 4; _idx0 > 0; _idx0--) {
      builder.PutUlong(HashVec[_idx0-1]);
    }
    for (int _idx0 = 3; _idx0 > 0; _idx0--) {
      builder.Prep(4, 8);
      builder.Pad(3);
      builder.PutByte(AlignmentVec_Byte[_idx0-1]);
      builder.PutInt(AlignmentVec_Int[_idx0-1]);
    }
    return new Offset<FlatSharpTests.Oracle.StructVectors>(builder.Offset);
  }
  public StructVectorsT UnPack() {
    var _o = new StructVectorsT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(StructVectorsT _o) {
    _o.AlignmentVec = new FlatSharpTests.Oracle.FiveByteStructT[3];
    for (var _j = 0; _j < 3; ++_j) { _o.AlignmentVec[_j] = this.AlignmentVec(_j).UnPack(); }
    _o.HashVec = new ulong[4];
    for (var _j = 0; _j < 4; ++_j) { _o.HashVec[_j] = this.HashVec(_j); }
  }
  public static Offset<FlatSharpTests.Oracle.StructVectors> Pack(FlatBufferBuilder builder, StructVectorsT _o) {
    if (_o == null) return default(Offset<FlatSharpTests.Oracle.StructVectors>);
    var _AlignmentVec_Int = new int[3];
    for (var idx0 = 0; idx0 < 3; ++idx0) {_AlignmentVec_Int[idx0] = _o.AlignmentVec[idx0].Int;}
    var _AlignmentVec_Byte = new byte[3];
    for (var idx0 = 0; idx0 < 3; ++idx0) {_AlignmentVec_Byte[idx0] = _o.AlignmentVec[idx0].Byte;}
    var _HashVec = _o.HashVec;
    return CreateStructVectors(
      builder,
      _AlignmentVec_Int,
      _AlignmentVec_Byte,
      _HashVec);
  }
}

public class StructVectorsT
{
  public FlatSharpTests.Oracle.FiveByteStructT[] AlignmentVec { get; set; }
  public ulong[] HashVec { get; set; }

  public StructVectorsT() {
    this.AlignmentVec = new FlatSharpTests.Oracle.FiveByteStructT[3];
    this.HashVec = new ulong[4];
  }
}


}
